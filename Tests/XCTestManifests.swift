#if !canImport(ObjectiveC)
import XCTest

extension AdapterRowTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AdapterRowTests = [
        ("testCopy", testCopy),
        ("testDataNoCopy", testDataNoCopy),
        ("testDescription", testDescription),
        ("testEmptyMapping", testEmptyMapping),
        ("testEqualityComparesScopes", testEqualityComparesScopes),
        ("testEqualityWithCopy", testEqualityWithCopy),
        ("testEqualityWithNonMappedRow", testEqualityWithNonMappedRow),
        ("testMergeScopes", testMergeScopes),
        ("testMissingColumn", testMissingColumn),
        ("testRangeAdapterIndexesAreIndependentFromScopes", testRangeAdapterIndexesAreIndependentFromScopes),
        ("testRangeAdapterWithCountableClosedRange", testRangeAdapterWithCountableClosedRange),
        ("testRangeAdapterWithCountableRange", testRangeAdapterWithCountableRange),
        ("testRequestAdapter", testRequestAdapter),
        ("testRowAdapterIsCaseInsensitiveAndPicksLeftmostBaseColumn", testRowAdapterIsCaseInsensitiveAndPicksLeftmostBaseColumn),
        ("testRowAsSequence", testRowAsSequence),
        ("testRowColumnNames", testRowColumnNames),
        ("testRowCount", testRowCount),
        ("testRowDatabaseValueAtIndex", testRowDatabaseValueAtIndex),
        ("testRowDatabaseValueNamed", testRowDatabaseValueNamed),
        ("testRowDatabaseValues", testRowDatabaseValues),
        ("testRowHasColumnIsCaseInsensitive", testRowHasColumnIsCaseInsensitive),
        ("testRowIsCaseInsensitive", testRowIsCaseInsensitive),
        ("testRowIsCaseInsensitiveAndReturnsLeftmostMatchingColumn", testRowIsCaseInsensitiveAndReturnsLeftmostMatchingColumn),
        ("testRowValueAtIndex", testRowValueAtIndex),
        ("testRowValueFromColumn", testRowValueFromColumn),
        ("testRowValueNamed", testRowValueNamed),
        ("testScopes", testScopes),
        ("testScopesWithMainMapping", testScopesWithMainMapping),
        ("testSuffixAdapter", testSuffixAdapter),
        ("testSuffixAdapterIndexesAreIndependentFromScopes", testSuffixAdapterIndexesAreIndependentFromScopes),
        ("testThreeLevelScopes", testThreeLevelScopes),
    ]
}

extension AnyCursorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AnyCursorTests = [
        ("testAnyCursorFromClosure", testAnyCursorFromClosure),
        ("testAnyCursorFromCursor", testAnyCursorFromCursor),
        ("testAnyCursorFromIterator", testAnyCursorFromIterator),
        ("testAnyCursorFromSequence", testAnyCursorFromSequence),
        ("testAnyCursorFromThrowingClosure", testAnyCursorFromThrowingClosure),
        ("testAnyCursorFromThrowingCursor", testAnyCursorFromThrowingCursor),
    ]
}

extension AssociationAggregateTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssociationAggregateTests = [
        ("testAdditionOperator", testAdditionOperator),
        ("testAggregateWithGroup", testAggregateWithGroup),
        ("testAggregateWithJoiningMethodAndTableAliasAndSQLSnippet", testAggregateWithJoiningMethodAndTableAliasAndSQLSnippet),
        ("testAnnotatedWithHasManyAggregateExpression", testAnnotatedWithHasManyAggregateExpression),
        ("testAnnotatedWithHasManyAggregateWithCustomKey", testAnnotatedWithHasManyAggregateWithCustomKey),
        ("testAnnotatedWithHasManyCustomAverage", testAnnotatedWithHasManyCustomAverage),
        ("testAnnotatedWithHasManyCustomCount", testAnnotatedWithHasManyCustomCount),
        ("testAnnotatedWithHasManyCustomMax", testAnnotatedWithHasManyCustomMax),
        ("testAnnotatedWithHasManyCustomMin", testAnnotatedWithHasManyCustomMin),
        ("testAnnotatedWithHasManyCustomSum", testAnnotatedWithHasManyCustomSum),
        ("testAnnotatedWithHasManyDefaultAverage", testAnnotatedWithHasManyDefaultAverage),
        ("testAnnotatedWithHasManyDefaultCount", testAnnotatedWithHasManyDefaultCount),
        ("testAnnotatedWithHasManyDefaultMax", testAnnotatedWithHasManyDefaultMax),
        ("testAnnotatedWithHasManyDefaultMaxJoiningRequired", testAnnotatedWithHasManyDefaultMaxJoiningRequired),
        ("testAnnotatedWithHasManyDefaultMin", testAnnotatedWithHasManyDefaultMin),
        ("testAnnotatedWithHasManyDefaultSum", testAnnotatedWithHasManyDefaultSum),
        ("testAnnotatedWithHasManyMultipleCount", testAnnotatedWithHasManyMultipleCount),
        ("testAnnotatedWithHasManyMultipleCustomAggregates", testAnnotatedWithHasManyMultipleCustomAggregates),
        ("testAnnotatedWithHasManyMultipleDefaultAggregates", testAnnotatedWithHasManyMultipleDefaultAggregates),
        ("testAnnotatedWithHasManyThroughDefaultCount", testAnnotatedWithHasManyThroughDefaultCount),
        ("testDivisionOperator", testDivisionOperator),
        ("testEqualOperator", testEqualOperator),
        ("testGreaterThanOperator", testGreaterThanOperator),
        ("testGreaterThanOrEqualOperator", testGreaterThanOrEqualOperator),
        ("testHasManyIsEmpty", testHasManyIsEmpty),
        ("testHasManyThroughIsEmpty", testHasManyThroughIsEmpty),
        ("testIfNullOperator", testIfNullOperator),
        ("testLessThanOperator", testLessThanOperator),
        ("testLessThanOrEqualOperator", testLessThanOrEqualOperator),
        ("testLogicalOperators", testLogicalOperators),
        ("testMultiplicationOperator", testMultiplicationOperator),
        ("testNegatedOperator", testNegatedOperator),
        ("testNotEqualOperator", testNotEqualOperator),
        ("testSubtractionOperator", testSubtractionOperator),
    ]
}

extension AssociationBelongsToDecodableRecordTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssociationBelongsToDecodableRecordTests = [
        ("testIncludingOptional", testIncludingOptional),
        ("testIncludingRequired", testIncludingRequired),
        ("testJoiningRequired", testJoiningRequired),
        ("testJoiningsOptional", testJoiningsOptional),
        ("testRequestRefining", testRequestRefining),
    ]
}

extension AssociationBelongsToFetchableRecordTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssociationBelongsToFetchableRecordTests = [
        ("testIncludingOptional", testIncludingOptional),
        ("testIncludingRequired", testIncludingRequired),
        ("testJoiningRequired", testJoiningRequired),
        ("testJoiningsOptional", testJoiningsOptional),
    ]
}

extension AssociationBelongsToRowScopeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssociationBelongsToRowScopeTests = [
        ("testCustomPluralScopeIncludingOptional", testCustomPluralScopeIncludingOptional),
        ("testCustomPluralScopeIncludingRequired", testCustomPluralScopeIncludingRequired),
        ("testCustomScopeIncludingOptional", testCustomScopeIncludingOptional),
        ("testCustomScopeIncludingRequired", testCustomScopeIncludingRequired),
        ("testCustomScopeJoiningOptional", testCustomScopeJoiningOptional),
        ("testCustomScopeJoiningRequired", testCustomScopeJoiningRequired),
        ("testDefaultScopeIncludingOptional", testDefaultScopeIncludingOptional),
        ("testDefaultScopeIncludingRequired", testDefaultScopeIncludingRequired),
        ("testDefaultScopeJoiningOptional", testDefaultScopeJoiningOptional),
        ("testDefaultScopeJoiningRequired", testDefaultScopeJoiningRequired),
        ("testJoiningDoesNotUseAnyRowAdapter", testJoiningDoesNotUseAnyRowAdapter),
    ]
}

extension AssociationBelongsToSQLDerivationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssociationBelongsToSQLDerivationTests = [
        ("testAssociationOrderBubbleUp", testAssociationOrderBubbleUp),
        ("testCustomSelection", testCustomSelection),
        ("testDefaultSelection", testDefaultSelection),
        ("testFilterAssociationInWhereClause", testFilterAssociationInWhereClause),
        ("testFilteredAssociationImpactsJoinOnClause", testFilteredAssociationImpactsJoinOnClause),
    ]
}

extension AssociationBelongsToSQLTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssociationBelongsToSQLTests = [
        ("testCaseInsensitivity", testCaseInsensitivity),
        ("testCompoundColumnNoForeignKey", testCompoundColumnNoForeignKey),
        ("testCompoundColumnNoForeignKeyNoPrimaryKey", testCompoundColumnNoForeignKeyNoPrimaryKey),
        ("testCompoundColumnSeveralForeignKeys", testCompoundColumnSeveralForeignKeys),
        ("testCompoundColumnSingleForeignKey", testCompoundColumnSingleForeignKey),
        ("testFetchCount", testFetchCount),
        ("testForeignKeyDefinitionFromColumn", testForeignKeyDefinitionFromColumn),
        ("testSingleColumnNoForeignKey", testSingleColumnNoForeignKey),
        ("testSingleColumnNoForeignKeyNoPrimaryKey", testSingleColumnNoForeignKeyNoPrimaryKey),
        ("testSingleColumnSeveralForeignKeys", testSingleColumnSeveralForeignKeys),
        ("testSingleColumnSingleForeignKey", testSingleColumnSingleForeignKey),
    ]
}

extension AssociationChainRowScopesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssociationChainRowScopesTests = [
        ("testChainOfThreeIncludingIncludingIncluding", testChainOfThreeIncludingIncludingIncluding),
        ("testChainOfThreeIncludingIncludingJoining", testChainOfThreeIncludingIncludingJoining),
        ("testChainOfThreeIncludingJoiningIncluding", testChainOfThreeIncludingJoiningIncluding),
        ("testChainOfThreeIncludingJoiningJoining", testChainOfThreeIncludingJoiningJoining),
        ("testChainOfThreeJoiningIncludingIncluding", testChainOfThreeJoiningIncludingIncluding),
        ("testChainOfThreeJoiningIncludingJoining", testChainOfThreeJoiningIncludingJoining),
        ("testChainOfThreeJoiningJoiningIncluding", testChainOfThreeJoiningJoiningIncluding),
        ("testChainOfThreeJoiningJoiningJoining", testChainOfThreeJoiningJoiningJoining),
        ("testChainOfTwoIncludingIncluding", testChainOfTwoIncludingIncluding),
        ("testChainOfTwoIncludingJoining", testChainOfTwoIncludingJoining),
        ("testChainOfTwoJoiningIncluding", testChainOfTwoJoiningIncluding),
        ("testChainOfTwoJoiningJoining", testChainOfTwoJoiningJoining),
    ]
}

extension AssociationChainSQLTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssociationChainSQLTests = [
        ("testChainOfThreeIncludingIncludingIncluding", testChainOfThreeIncludingIncludingIncluding),
        ("testChainOfThreeIncludingIncludingJoining", testChainOfThreeIncludingIncludingJoining),
        ("testChainOfThreeIncludingJoiningIncluding", testChainOfThreeIncludingJoiningIncluding),
        ("testChainOfThreeIncludingJoiningJoining", testChainOfThreeIncludingJoiningJoining),
        ("testChainOfThreeJoiningIncludingIncluding", testChainOfThreeJoiningIncludingIncluding),
        ("testChainOfThreeJoiningIncludingJoining", testChainOfThreeJoiningIncludingJoining),
        ("testChainOfThreeJoiningJoiningIncluding", testChainOfThreeJoiningJoiningIncluding),
        ("testChainOfThreeJoiningJoiningJoining", testChainOfThreeJoiningJoiningJoining),
        ("testChainOfThreeRequestForIncludingIncluding", testChainOfThreeRequestForIncludingIncluding),
        ("testChainOfTwoIncludingIncluding", testChainOfTwoIncludingIncluding),
        ("testChainOfTwoIncludingIncludingIncludingSameAssociation", testChainOfTwoIncludingIncludingIncludingSameAssociation),
        ("testChainOfTwoIncludingIncludingJoiningSameAssociation", testChainOfTwoIncludingIncludingJoiningSameAssociation),
        ("testChainOfTwoIncludingJoining", testChainOfTwoIncludingJoining),
        ("testChainOfTwoIncludingJoiningIncludingSameAssociation", testChainOfTwoIncludingJoiningIncludingSameAssociation),
        ("testChainOfTwoIncludingJoiningJoiningSameAssociation", testChainOfTwoIncludingJoiningJoiningSameAssociation),
        ("testChainOfTwoJoiningIncluding", testChainOfTwoJoiningIncluding),
        ("testChainOfTwoJoiningIncludingIncludingSameAssociation", testChainOfTwoJoiningIncludingIncludingSameAssociation),
        ("testChainOfTwoJoiningIncludingJoiningSameAssociation", testChainOfTwoJoiningIncludingJoiningSameAssociation),
        ("testChainOfTwoJoiningJoining", testChainOfTwoJoiningJoining),
        ("testChainOfTwoJoiningJoiningIncludingSameAssociation", testChainOfTwoJoiningJoiningIncludingSameAssociation),
        ("testChainOfTwoJoiningJoiningJoiningSameAssociation", testChainOfTwoJoiningJoiningJoiningSameAssociation),
        ("testChainOfTwoRequestForIncluding", testChainOfTwoRequestForIncluding),
        ("testChainOfTwoRequestForJoining", testChainOfTwoRequestForJoining),
    ]
}

extension AssociationHasManyOrderingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssociationHasManyOrderingTests = [
        ("testIncludingAll", testIncludingAll),
        ("testReorderedIncludingAll", testReorderedIncludingAll),
        ("testReorderedRequestFor", testReorderedRequestFor),
        ("testRequestFor", testRequestFor),
    ]
}

extension AssociationHasManyRowScopeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssociationHasManyRowScopeTests = [
        ("testCustomKey", testCustomKey),
        ("testPluralTable", testPluralTable),
        ("testSingularTable", testSingularTable),
    ]
}

extension AssociationHasManySQLTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssociationHasManySQLTests = [
        ("testAssociationFilteredByOtherAssociation", testAssociationFilteredByOtherAssociation),
        ("testCompoundColumnNoForeignKey", testCompoundColumnNoForeignKey),
        ("testCompoundColumnNoForeignKeyNoPrimaryKey", testCompoundColumnNoForeignKeyNoPrimaryKey),
        ("testCompoundColumnSeveralForeignKeys", testCompoundColumnSeveralForeignKeys),
        ("testCompoundColumnSingleForeignKey", testCompoundColumnSingleForeignKey),
        ("testForeignKeyDefinitionFromColumn", testForeignKeyDefinitionFromColumn),
        ("testSingleColumnNoForeignKey", testSingleColumnNoForeignKey),
        ("testSingleColumnNoForeignKeyNoPrimaryKey", testSingleColumnNoForeignKeyNoPrimaryKey),
        ("testSingleColumnSeveralForeignKeys", testSingleColumnSeveralForeignKeys),
        ("testSingleColumnSingleForeignKey", testSingleColumnSingleForeignKey),
    ]
}

extension AssociationHasManyThroughOrderingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssociationHasManyThroughOrderingTests = [
        ("testIncludingAll", testIncludingAll),
        ("testReorderedIncludingAll", testReorderedIncludingAll),
        ("testReorderedRequestFor", testReorderedRequestFor),
        ("testRequestFor", testRequestFor),
    ]
}

extension AssociationHasManyThroughRowScopeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssociationHasManyThroughRowScopeTests = [
        ("testBelongsToHasManyCustomKey", testBelongsToHasManyCustomKey),
        ("testBelongsToHasManyPluralTable", testBelongsToHasManyPluralTable),
        ("testBelongsToHasManySingularTable", testBelongsToHasManySingularTable),
        ("testHasManyBelongsToCustomKey", testHasManyBelongsToCustomKey),
        ("testHasManyBelongsToPluralTable", testHasManyBelongsToPluralTable),
        ("testHasManyBelongsToSingularTable", testHasManyBelongsToSingularTable),
    ]
}

extension AssociationHasManyThroughSQLTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssociationHasManyThroughSQLTests = [
        ("testAssociationFilteredByOtherAssociation", testAssociationFilteredByOtherAssociation),
        ("testBelongsToHasMany", testBelongsToHasMany),
        ("testHasManyBelongsTo", testHasManyBelongsTo),
        ("testHasManyHasOne", testHasManyHasOne),
        ("testHasOneHasMany", testHasOneHasMany),
    ]
}

extension AssociationHasOneSQLDerivationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssociationHasOneSQLDerivationTests = [
        ("testAssociationOrderBubbleUp", testAssociationOrderBubbleUp),
        ("testCustomSelection", testCustomSelection),
        ("testDefaultSelection", testDefaultSelection),
        ("testFilterAssociationInWhereClause", testFilterAssociationInWhereClause),
        ("testFilteredAssociationImpactsJoinOnClause", testFilteredAssociationImpactsJoinOnClause),
    ]
}

extension AssociationHasOneSQLTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssociationHasOneSQLTests = [
        ("testCompoundColumnNoForeignKey", testCompoundColumnNoForeignKey),
        ("testCompoundColumnNoForeignKeyNoPrimaryKey", testCompoundColumnNoForeignKeyNoPrimaryKey),
        ("testCompoundColumnSeveralForeignKeys", testCompoundColumnSeveralForeignKeys),
        ("testCompoundColumnSingleForeignKey", testCompoundColumnSingleForeignKey),
        ("testForeignKeyDefinitionFromColumn", testForeignKeyDefinitionFromColumn),
        ("testSingleColumnNoForeignKey", testSingleColumnNoForeignKey),
        ("testSingleColumnNoForeignKeyNoPrimaryKey", testSingleColumnNoForeignKeyNoPrimaryKey),
        ("testSingleColumnSeveralForeignKeys", testSingleColumnSeveralForeignKeys),
        ("testSingleColumnSingleForeignKey", testSingleColumnSingleForeignKey),
    ]
}

extension AssociationHasOneThroughDecodableRecordTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssociationHasOneThroughDecodableRecordTests = [
        ("testIncludingOptional", testIncludingOptional),
        ("testIncludingOptionalIncludingRequiredPivot", testIncludingOptionalIncludingRequiredPivot),
        ("testIncludingRequired", testIncludingRequired),
        ("testJoiningOptional", testJoiningOptional),
        ("testJoiningRequired", testJoiningRequired),
    ]
}

extension AssociationHasOneThroughFetchableRecordTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssociationHasOneThroughFetchableRecordTests = [
        ("testIncludingOptional", testIncludingOptional),
        ("testIncludingOptionalIncludingRequiredPivot", testIncludingOptionalIncludingRequiredPivot),
        ("testIncludingRequired", testIncludingRequired),
        ("testJoiningOptional", testJoiningOptional),
        ("testJoiningRequired", testJoiningRequired),
    ]
}

extension AssociationHasOneThroughRowscopeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssociationHasOneThroughRowscopeTests = [
        ("testCustomC1", testCustomC1),
        ("testCustomC2", testCustomC2),
        ("testCustomC3", testCustomC3),
        ("testDefaultScopeIncludingOptional", testDefaultScopeIncludingOptional),
        ("testDefaultScopeIncludingOptionalIncludingRequiredPivot", testDefaultScopeIncludingOptionalIncludingRequiredPivot),
        ("testDefaultScopeIncludingRequired", testDefaultScopeIncludingRequired),
        ("testDefaultScopeJoiningOptional", testDefaultScopeJoiningOptional),
        ("testDefaultScopeJoiningRequired", testDefaultScopeJoiningRequired),
        ("testJoiningDoesNotUseAnyRowAdapter", testJoiningDoesNotUseAnyRowAdapter),
    ]
}

extension AssociationHasOneThroughSQLDerivationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssociationHasOneThroughSQLDerivationTests = [
        ("testCustomSelection", testCustomSelection),
        ("testDefaultSelection", testDefaultSelection),
        ("testFilterAssociationInWhereClause", testFilterAssociationInWhereClause),
        ("testFilteredAssociationImpactsJoinOnClause", testFilteredAssociationImpactsJoinOnClause),
        ("testOrderAssociation", testOrderAssociation),
    ]
}

extension AssociationHasOneThroughSQLTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssociationHasOneThroughSQLTests = [
        ("testBelongsToBelongsTo", testBelongsToBelongsTo),
        ("testBelongsToBelongsToBelongsTo", testBelongsToBelongsToBelongsTo),
        ("testBelongsToBelongsToBelongsToBelongsTo", testBelongsToBelongsToBelongsToBelongsTo),
        ("testBelongsToBelongsToHasOne", testBelongsToBelongsToHasOne),
        ("testBelongsToHasOne", testBelongsToHasOne),
        ("testBelongsToHasOneBelongsTo", testBelongsToHasOneBelongsTo),
        ("testBelongsToHasOneHasOne", testBelongsToHasOneHasOne),
        ("testHasOneBelongsTo", testHasOneBelongsTo),
        ("testHasOneBelongsToBelongsTo", testHasOneBelongsToBelongsTo),
        ("testHasOneBelongsToHasOne", testHasOneBelongsToHasOne),
        ("testHasOneHasOne", testHasOneHasOne),
        ("testHasOneHasOneBelongsTo", testHasOneHasOneBelongsTo),
        ("testHasOneHasOneHasOne", testHasOneHasOneHasOne),
    ]
}

extension AssociationParallelDecodableRecordTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssociationParallelDecodableRecordTests = [
        ("testParallelTwoIncludingOptional", testParallelTwoIncludingOptional),
        ("testParallelTwoIncludingRequired", testParallelTwoIncludingRequired),
        ("testParallelTwoJoiningOptional", testParallelTwoJoiningOptional),
        ("testParallelTwoJoiningRequired", testParallelTwoJoiningRequired),
    ]
}

extension AssociationParallelRowScopesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssociationParallelRowScopesTests = [
        ("testCustomScopeParallelTwoIncludingIncluding", testCustomScopeParallelTwoIncludingIncluding),
        ("testCustomScopeParallelTwoIncludingIncludingSameAssociation", testCustomScopeParallelTwoIncludingIncludingSameAssociation),
        ("testCustomScopeParallelTwoIncludingJoining", testCustomScopeParallelTwoIncludingJoining),
        ("testCustomScopeParallelTwoIncludingJoiningSameAssociation", testCustomScopeParallelTwoIncludingJoiningSameAssociation),
        ("testCustomScopeParallelTwoJoiningIncluding", testCustomScopeParallelTwoJoiningIncluding),
        ("testCustomScopeParallelTwoJoiningIncludingSameAssociation", testCustomScopeParallelTwoJoiningIncludingSameAssociation),
        ("testCustomScopeParallelTwoJoiningJoining", testCustomScopeParallelTwoJoiningJoining),
        ("testCustomScopeParallelTwoJoiningJoiningSameAssociation", testCustomScopeParallelTwoJoiningJoiningSameAssociation),
        ("testDefaultScopeParallelTwoIncludingIncluding", testDefaultScopeParallelTwoIncludingIncluding),
        ("testDefaultScopeParallelTwoIncludingIncludingSameAssociation", testDefaultScopeParallelTwoIncludingIncludingSameAssociation),
        ("testDefaultScopeParallelTwoIncludingJoining", testDefaultScopeParallelTwoIncludingJoining),
        ("testDefaultScopeParallelTwoIncludingJoiningSameAssociation", testDefaultScopeParallelTwoIncludingJoiningSameAssociation),
        ("testDefaultScopeParallelTwoJoiningIncluding", testDefaultScopeParallelTwoJoiningIncluding),
        ("testDefaultScopeParallelTwoJoiningIncludingSameAssociation", testDefaultScopeParallelTwoJoiningIncludingSameAssociation),
        ("testDefaultScopeParallelTwoJoiningJoining", testDefaultScopeParallelTwoJoiningJoining),
        ("testDefaultScopeParallelTwoJoiningJoiningSameAssociation", testDefaultScopeParallelTwoJoiningJoiningSameAssociation),
    ]
}

extension AssociationParallelSQLTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssociationParallelSQLTests = [
        ("testParallelTwoIncludingIncluding", testParallelTwoIncludingIncluding),
        ("testParallelTwoIncludingIncludingOtherKey", testParallelTwoIncludingIncludingOtherKey),
        ("testParallelTwoIncludingIncludingSameAssociation", testParallelTwoIncludingIncludingSameAssociation),
        ("testParallelTwoIncludingJoining", testParallelTwoIncludingJoining),
        ("testParallelTwoIncludingJoiningSameAssociation", testParallelTwoIncludingJoiningSameAssociation),
        ("testParallelTwoJoiningIncluding", testParallelTwoJoiningIncluding),
        ("testParallelTwoJoiningIncludingSameAssociation", testParallelTwoJoiningIncludingSameAssociation),
        ("testParallelTwoJoiningJoining", testParallelTwoJoiningJoining),
        ("testParallelTwoJoiningJoiningSameAssociation", testParallelTwoJoiningJoiningSameAssociation),
        ("testRequestRefiningFilter", testRequestRefiningFilter),
        ("testRequestRefiningOrder", testRequestRefiningOrder),
        ("testRequestRefiningSelection", testRequestRefiningSelection),
    ]
}

extension AssociationPrefetchingCodableRecordTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssociationPrefetchingCodableRecordTests = [
        ("testIncludingAllHasMany", testIncludingAllHasMany),
        ("testIncludingAllHasManyIncludingAllHasMany", testIncludingAllHasManyIncludingAllHasMany),
        ("testIncludingAllHasManyIncludingRequiredOrOptionalHasMany", testIncludingAllHasManyIncludingRequiredOrOptionalHasMany),
        ("testIncludingAllHasManyThroughHasManyUsingHasMany", testIncludingAllHasManyThroughHasManyUsingHasMany),
        ("testIncludingOptionalBelongsToIncludingAllHasMany", testIncludingOptionalBelongsToIncludingAllHasMany),
        ("testJoiningOptionalHasOneThroughIncludingAllHasMany", testJoiningOptionalHasOneThroughIncludingAllHasMany),
        ("testSelfJoin", testSelfJoin),
    ]
}

extension AssociationPrefetchingFetchableRecordTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssociationPrefetchingFetchableRecordTests = [
        ("testIncludingAllHasMany", testIncludingAllHasMany),
        ("testIncludingAllHasManyIncludingAllHasMany", testIncludingAllHasManyIncludingAllHasMany),
        ("testIncludingAllHasManyIncludingRequiredOrOptionalHasMany", testIncludingAllHasManyIncludingRequiredOrOptionalHasMany),
        ("testIncludingAllHasManyThroughHasManyUsingHasMany", testIncludingAllHasManyThroughHasManyUsingHasMany),
        ("testIncludingOptionalBelongsToIncludingAllHasMany", testIncludingOptionalBelongsToIncludingAllHasMany),
        ("testJoiningOptionalHasOneThroughIncludingAllHasMany", testJoiningOptionalHasOneThroughIncludingAllHasMany),
    ]
}

extension AssociationPrefetchingObservationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssociationPrefetchingObservationTests = [
        ("testIncludingAllHasMany", testIncludingAllHasMany),
        ("testIncludingAllHasManyIncludingAllHasMany", testIncludingAllHasManyIncludingAllHasMany),
        ("testIncludingAllHasManyIncludingRequiredOrOptionalHasMany", testIncludingAllHasManyIncludingRequiredOrOptionalHasMany),
        ("testIncludingAllHasManyThroughHasManyUsingHasMany", testIncludingAllHasManyThroughHasManyUsingHasMany),
        ("testIncludingOptionalBelongsToIncludingAllHasMany", testIncludingOptionalBelongsToIncludingAllHasMany),
        ("testJoiningOptionalHasOneThroughIncludingAllHasMany", testJoiningOptionalHasOneThroughIncludingAllHasMany),
    ]
}

extension AssociationPrefetchingRowTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssociationPrefetchingRowTests = [
        ("testCopy", testCopy),
        ("testEquatable", testEquatable),
        ("testIncludingAllHasMany", testIncludingAllHasMany),
        ("testIncludingAllHasManyIncludingAllHasMany", testIncludingAllHasManyIncludingAllHasMany),
        ("testIncludingAllHasManyIncludingRequiredOrOptionalHasMany", testIncludingAllHasManyIncludingRequiredOrOptionalHasMany),
        ("testIncludingAllHasManyThroughBelongsToUsingHasMany", testIncludingAllHasManyThroughBelongsToUsingHasMany),
        ("testIncludingAllHasManyThroughHasManyUsingHasMany", testIncludingAllHasManyThroughHasManyUsingHasMany),
        ("testIncludingOptionalBelongsToIncludingAllHasMany", testIncludingOptionalBelongsToIncludingAllHasMany),
        ("testJoiningOptionalHasOneThroughIncludingAllHasMany", testJoiningOptionalHasOneThroughIncludingAllHasMany),
    ]
}

extension AssociationPrefetchingSQLTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssociationPrefetchingSQLTests = [
        ("testAssociationFilteredByOtherAssociation", testAssociationFilteredByOtherAssociation),
        ("testIncludingAllHasMany", testIncludingAllHasMany),
        ("testIncludingAllHasManyIncludingAllHasMany", testIncludingAllHasManyIncludingAllHasMany),
        ("testIncludingAllHasManyIncludingRequiredOrOptionalHasMany", testIncludingAllHasManyIncludingRequiredOrOptionalHasMany),
        ("testIncludingAllHasManyThroughBelongsToUsingHasMany", testIncludingAllHasManyThroughBelongsToUsingHasMany),
        ("testIncludingAllHasManyThroughHasManyUsingHasMany", testIncludingAllHasManyThroughHasManyUsingHasMany),
        ("testIncludingAllHasManyThroughHasOneUsingHasMany", testIncludingAllHasManyThroughHasOneUsingHasMany),
        ("testIncludingAllHasManyWithCompoundForeignKey", testIncludingAllHasManyWithCompoundForeignKey),
        ("testIncludingOptionalBelongsToIncludingAllHasMany", testIncludingOptionalBelongsToIncludingAllHasMany),
        ("testIncludingOptionalBelongsToIncludingOptionalBelongsToIncludingAllHasMany", testIncludingOptionalBelongsToIncludingOptionalBelongsToIncludingAllHasMany),
        ("testIncludingOptionalHasOneIncludingAllHasMany", testIncludingOptionalHasOneIncludingAllHasMany),
        ("testIncludingOptionalHasOneThroughIncludingAllHasMany", testIncludingOptionalHasOneThroughIncludingAllHasMany),
        ("testJoiningOptionalBelongsToIncludingAllHasMany", testJoiningOptionalBelongsToIncludingAllHasMany),
        ("testJoiningOptionalBelongsToJoiningOptionalBelongsToIncludingAllHasMany", testJoiningOptionalBelongsToJoiningOptionalBelongsToIncludingAllHasMany),
        ("testJoiningOptionalHasOneIncludingAllHasMany", testJoiningOptionalHasOneIncludingAllHasMany),
        ("testJoiningOptionalHasOneThroughIncludingAllHasMany", testJoiningOptionalHasOneThroughIncludingAllHasMany),
    ]
}

extension AssociationRowScopeSearchTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssociationRowScopeSearchTests = [
        ("testBreadthFirstScopeLookup", testBreadthFirstScopeLookup),
        ("testDecodableWithCustomRowDecoding", testDecodableWithCustomRowDecoding),
        ("testFetchableRecordDecoding", testFetchableRecordDecoding),
        ("testFlatDecodableRecordDecoding", testFlatDecodableRecordDecoding),
        ("testNestedDecodableRecordDecoding", testNestedDecodableRecordDecoding),
        ("testTestedRequest", testTestedRequest),
    ]
}

extension AssociationTableAliasTestsSQLTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssociationTableAliasTestsSQLTests = [
        ("testAssociationRewrite", testAssociationRewrite),
        ("testCrossTableExpressions", testCrossTableExpressions),
        ("testMultipleForeignKeys", testMultipleForeignKeys),
        ("testRecursiveRelationDepth1", testRecursiveRelationDepth1),
        ("testRecursiveRelationDepth2", testRecursiveRelationDepth2),
        ("testRecursiveThroughMultipleForeignKeys", testRecursiveThroughMultipleForeignKeys),
        ("testTableAliasBasics", testTableAliasBasics),
        ("testUserDefinedAlias", testUserDefinedAlias),
        ("testUserInducedNameConflict", testUserInducedNameConflict),
    ]
}

extension CGFloatTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CGFloatTests = [
        ("testCGFLoat", testCGFLoat),
    ]
}

extension ColumnExpressionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ColumnExpressionTests = [
        ("testCodingKeysAsColumnExpression", testCodingKeysAsColumnExpression),
        ("testColumnsDerivedFromCodingKeys", testColumnsDerivedFromCodingKeys),
        ("testRawColumnExpression", testRawColumnExpression),
        ("testRawRepresentableColumnExpression", testRawRepresentableColumnExpression),
    ]
}

extension ColumnInfoTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ColumnInfoTests = [
        ("testColumnInfo", testColumnInfo),
    ]
}

extension ConcurrencyTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ConcurrencyTests = [
        ("testBusyCallback", testBusyCallback),
        ("testDeferredTransactionConcurrency", testDeferredTransactionConcurrency),
        ("testExclusiveTransactionConcurrency", testExclusiveTransactionConcurrency),
        ("testImmediateTransactionConcurrency", testImmediateTransactionConcurrency),
        ("testReaderDuringDefaultTransaction", testReaderDuringDefaultTransaction),
        ("testReaderInDeferredTransactionDuringDefaultTransaction", testReaderInDeferredTransactionDuringDefaultTransaction),
        ("testWrappedReadWrite", testWrappedReadWrite),
    ]
}

extension CursorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CursorTests = [
        ("testCompactMap", testCompactMap),
        ("testContainsClosure", testContainsClosure),
        ("testContainsEquatable", testContainsEquatable),
        ("testContainsIsLazy", testContainsIsLazy),
        ("testDropLast", testDropLast),
        ("testFirst", testFirst),
        ("testFirstIsLazy", testFirstIsLazy),
        ("testForEach", testForEach),
        ("testJoinedWithSeparator", testJoinedWithSeparator),
        ("testMax", testMax),
        ("testMin", testMin),
        ("testReduce", testReduce),
        ("testReduceInto", testReduceInto),
        ("testSuffix", testSuffix),
        ("testThrowingForEach", testThrowingForEach),
    ]
}

extension DataMemoryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DataMemoryTests = [
        ("testMemoryBehavior", testMemoryBehavior),
    ]
}

extension DatabaseAbortedTransactionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseAbortedTransactionTests = [
        ("testReadTransactionAbortedByInterrupt", testReadTransactionAbortedByInterrupt),
        ("testReadTransactionAbortedByInterruptDoesNotPreventFurtherRead", testReadTransactionAbortedByInterruptDoesNotPreventFurtherRead),
        ("testReadTransactionRestartHack", testReadTransactionRestartHack),
        ("testTransactionAbortedByConflictPreventsFurtherDatabaseAccess", testTransactionAbortedByConflictPreventsFurtherDatabaseAccess),
        ("testTransactionAbortedByUser", testTransactionAbortedByUser),
        ("testWriteTransactionAbortedByInterrupt", testWriteTransactionAbortedByInterrupt),
        ("testWriteTransactionAbortedByInterruptDoesNotPreventRollback", testWriteTransactionAbortedByInterruptDoesNotPreventRollback),
        ("testWriteTransactionAbortedByInterruptPreventsFurtherDatabaseAccess", testWriteTransactionAbortedByInterruptPreventsFurtherDatabaseAccess),
    ]
}

extension DatabaseAfterNextTransactionCommitTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseAfterNextTransactionCommitTests = [
        ("testTransactionCompletions", testTransactionCompletions),
    ]
}

extension DatabaseAggregateTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseAggregateTests = [
        ("testAggregateArgumentBlob", testAggregateArgumentBlob),
        ("testAggregateArgumentCustomValueType", testAggregateArgumentCustomValueType),
        ("testAggregateArgumentDouble", testAggregateArgumentDouble),
        ("testAggregateArgumentInt64", testAggregateArgumentInt64),
        ("testAggregateArgumentNil", testAggregateArgumentNil),
        ("testAggregateArgumentString", testAggregateArgumentString),
        ("testAggregateOfOneArgument", testAggregateOfOneArgument),
        ("testAggregateOfTwoArguments", testAggregateOfTwoArguments),
        ("testAggregateResultThrowingCustomError", testAggregateResultThrowingCustomError),
        ("testAggregateResultThrowingDatabaseErrorWithCode", testAggregateResultThrowingDatabaseErrorWithCode),
        ("testAggregateResultThrowingDatabaseErrorWithMessageAndCode", testAggregateResultThrowingDatabaseErrorWithMessageAndCode),
        ("testAggregateResultThrowingDatabaseErrorWithMessage", testAggregateResultThrowingDatabaseErrorWithMessage),
        ("testAggregateReturningCustomValueType", testAggregateReturningCustomValueType),
        ("testAggregateReturningData", testAggregateReturningData),
        ("testAggregateReturningDouble", testAggregateReturningDouble),
        ("testAggregateReturningInt64", testAggregateReturningInt64),
        ("testAggregateReturningNull", testAggregateReturningNull),
        ("testAggregateReturningString", testAggregateReturningString),
        ("testAggregateStepThrowingCustomError", testAggregateStepThrowingCustomError),
        ("testAggregateStepThrowingDatabaseErrorWithCode", testAggregateStepThrowingDatabaseErrorWithCode),
        ("testAggregateStepThrowingDatabaseErrorWithMessageAndCode", testAggregateStepThrowingDatabaseErrorWithMessageAndCode),
        ("testAggregateStepThrowingDatabaseErrorWithMessage", testAggregateStepThrowingDatabaseErrorWithMessage),
        ("testAggregateWithoutArgument", testAggregateWithoutArgument),
        ("testAggregation", testAggregation),
        ("testDeallocationAfterResultError", testDeallocationAfterResultError),
        ("testDeallocationAfterStepError", testDeallocationAfterStepError),
        ("testDeallocationAfterSuccess", testDeallocationAfterSuccess),
        ("testParallelAggregation", testParallelAggregation),
        ("testVariadicFunction", testVariadicFunction),
    ]
}

extension DatabaseCollationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseCollationTests = [
        ("testCollation", testCollation),
        ("testDefaultCollations", testDefaultCollations),
    ]
}

extension DatabaseConfigurationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseConfigurationTests = [
        ("testAcceptsDoubleQuotedStringLiteralsDefault", testAcceptsDoubleQuotedStringLiteralsDefault),
        ("testAcceptsDoubleQuotedStringLiteralsFalse", testAcceptsDoubleQuotedStringLiteralsFalse),
        ("testAcceptsDoubleQuotedStringLiteralsTrue", testAcceptsDoubleQuotedStringLiteralsTrue),
        ("testBusyModeImmediate", testBusyModeImmediate),
        ("testPrepareDatabase", testPrepareDatabase),
        ("testPrepareDatabaseError", testPrepareDatabaseError),
    ]
}

extension DatabaseCursorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseCursorTests = [
        ("testIssue583", testIssue583),
        ("testNextReturnsNilAfterExhaustion", testNextReturnsNilAfterExhaustion),
        ("testStepDatabaseError", testStepDatabaseError),
        ("testStepError", testStepError),
    ]
}

extension DatabaseDateDecodingStrategyTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseDateDecodingStrategyTests = [
        ("testCustom", testCustom),
        ("testDeferredToDate", testDeferredToDate),
        ("testFormatted", testFormatted),
        ("testIso8601", testIso8601),
        ("testMillisecondsSince1970", testMillisecondsSince1970),
        ("testTimeIntervalSince1970", testTimeIntervalSince1970),
        ("testTimeIntervalSinceReferenceDate", testTimeIntervalSinceReferenceDate),
    ]
}

extension DatabaseDateEncodingStrategyTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseDateEncodingStrategyTests = [
        ("testCustom", testCustom),
        ("testDeferredToDate", testDeferredToDate),
        ("testFormatted", testFormatted),
        ("testIso8601", testIso8601),
        ("testMillisecondsSince1970", testMillisecondsSince1970),
        ("testSecondsSince1970", testSecondsSince1970),
        ("testTimeIntervalSince1970", testTimeIntervalSince1970),
        ("testTimeIntervalSinceReferenceDate", testTimeIntervalSinceReferenceDate),
    ]
}

extension DatabaseErrorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseErrorTests = [
        ("testDatabaseErrorInTopLevelSavepoint", testDatabaseErrorInTopLevelSavepoint),
        ("testDatabaseErrorInTransaction", testDatabaseErrorInTransaction),
        ("testDatabaseErrorMessage", testDatabaseErrorMessage),
        ("testDatabaseErrorThrownByExecuteMultiStatementContainSQL", testDatabaseErrorThrownByExecuteMultiStatementContainSQL),
        ("testDatabaseErrorThrownByUpdateStatementContainSQLAndArguments", testDatabaseErrorThrownByUpdateStatementContainSQLAndArguments),
        ("testExtendedResultCodesAreActivated", testExtendedResultCodesAreActivated),
        ("testNSErrorBridging", testNSErrorBridging),
    ]
}

extension DatabaseFunctionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseFunctionTests = [
        ("testDefaultFunctions", testDefaultFunctions),
        ("testFunctionArgumentBlob", testFunctionArgumentBlob),
        ("testFunctionArgumentCustomValueType", testFunctionArgumentCustomValueType),
        ("testFunctionArgumentDouble", testFunctionArgumentDouble),
        ("testFunctionArgumentInt64", testFunctionArgumentInt64),
        ("testFunctionArgumentNil", testFunctionArgumentNil),
        ("testFunctionArgumentString", testFunctionArgumentString),
        ("testFunctionOfOneArgument", testFunctionOfOneArgument),
        ("testFunctionOfTwoArguments", testFunctionOfTwoArguments),
        ("testFunctionReturningCustomValueType", testFunctionReturningCustomValueType),
        ("testFunctionReturningData", testFunctionReturningData),
        ("testFunctionReturningDouble", testFunctionReturningDouble),
        ("testFunctionReturningInt64", testFunctionReturningInt64),
        ("testFunctionReturningNull", testFunctionReturningNull),
        ("testFunctionReturningString", testFunctionReturningString),
        ("testFunctionsAreClosures", testFunctionsAreClosures),
        ("testFunctionThrowingCustomError", testFunctionThrowingCustomError),
        ("testFunctionThrowingDatabaseErrorWithCode", testFunctionThrowingDatabaseErrorWithCode),
        ("testFunctionThrowingDatabaseErrorWithMessageAndCode", testFunctionThrowingDatabaseErrorWithMessageAndCode),
        ("testFunctionThrowingDatabaseErrorWithMessage", testFunctionThrowingDatabaseErrorWithMessage),
        ("testFunctionWithoutArgument", testFunctionWithoutArgument),
        ("testVariadicFunction", testVariadicFunction),
    ]
}

extension DatabaseLogErrorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseLogErrorTests = [
        ("testErrorLog", testErrorLog),
    ]
}

extension DatabaseMigratorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseMigratorTests = [
        ("testAppliedMigrations", testAppliedMigrations),
        ("testCompletedMigrations", testCompletedMigrations),
        ("testEmptyMigrator", testEmptyMigrator),
        ("testEraseDatabaseOnSchemaChange", testEraseDatabaseOnSchemaChange),
        ("testEraseDatabaseOnSchemaChangeDoesNotDeadLock", testEraseDatabaseOnSchemaChangeDoesNotDeadLock),
        ("testEraseDatabaseOnSchemaChangeDoesNotEraseDatabaseOnAddedMigration", testEraseDatabaseOnSchemaChangeDoesNotEraseDatabaseOnAddedMigration),
        ("testEraseDatabaseOnSchemaChangeWithConfiguration", testEraseDatabaseOnSchemaChangeWithConfiguration),
        ("testEraseDatabaseOnSchemaChangeWithRenamedMigration", testEraseDatabaseOnSchemaChangeWithRenamedMigration),
        ("testForeignKeyViolation", testForeignKeyViolation),
        ("testMergedMigrators", testMergedMigrators),
        ("testMigrateUpTo", testMigrateUpTo),
        ("testMigrationFailureTriggersRollback", testMigrationFailureTriggersRollback),
        ("testMigratorDatabasePool", testMigratorDatabasePool),
        ("testMigratorDatabaseQueue", testMigratorDatabaseQueue),
        ("testSuperseded", testSuperseded),
    ]
}

extension DatabasePoolBackupTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabasePoolBackupTests = [
        ("testBackup", testBackup),
    ]
}

extension DatabasePoolCollationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabasePoolCollationTests = [
        ("testCollationIsSharedBetweenWriterAndReaders", testCollationIsSharedBetweenWriterAndReaders),
    ]
}

extension DatabasePoolConcurrencyTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabasePoolConcurrencyTests = [
        ("testAsyncConcurrentReadError", testAsyncConcurrentReadError),
        ("testAsyncConcurrentReadOpensATransaction", testAsyncConcurrentReadOpensATransaction),
        ("testAsyncConcurrentReadOutsideOfTransaction", testAsyncConcurrentReadOutsideOfTransaction),
        ("testBarrierIsLockedByOneUnfinishedRead", testBarrierIsLockedByOneUnfinishedRead),
        ("testBarrierLocksReads", testBarrierLocksReads),
        ("testConcurrentOpening", testConcurrentOpening),
        ("testConcurrentRead", testConcurrentRead),
        ("testConcurrentReadError", testConcurrentReadError),
        ("testConcurrentReadOpensATransaction", testConcurrentReadOpensATransaction),
        ("testConcurrentReadOutsideOfTransaction", testConcurrentReadOutsideOfTransaction),
        ("testCustomLabel", testCustomLabel),
        ("testDatabasePoolFundamental1", testDatabasePoolFundamental1),
        ("testDatabasePoolFundamental2", testDatabasePoolFundamental2),
        ("testDatabasePoolFundamental3", testDatabasePoolFundamental3),
        ("testDefaultLabel", testDefaultLabel),
        ("testIssue80", testIssue80),
        ("testLongRunningReadTransaction", testLongRunningReadTransaction),
        ("testQoS", testQoS),
        ("testReadBlockIsolationStartingWithRead", testReadBlockIsolationStartingWithRead),
        ("testReadBlockIsolationStartingWithSelect", testReadBlockIsolationStartingWithSelect),
        ("testReadBlockIsolationStartingWithWrite", testReadBlockIsolationStartingWithWrite),
        ("testReadBlockIsolationStartingWithWriteTransaction", testReadBlockIsolationStartingWithWriteTransaction),
        ("testReadError", testReadError),
        ("testReadFromPreviousNonWALDatabase", testReadFromPreviousNonWALDatabase),
        ("testReadMethodIsolationOfStatement", testReadMethodIsolationOfStatement),
        ("testReadMethodIsolationOfStatementWithCheckpoint", testReadMethodIsolationOfStatementWithCheckpoint),
        ("testReadOpensATransaction", testReadOpensATransaction),
        ("testTargetQueue", testTargetQueue),
        ("testUnsafeReadMethodIsolationOfBlock", testUnsafeReadMethodIsolationOfBlock),
        ("testUnsafeReadMethodIsolationOfStatement", testUnsafeReadMethodIsolationOfStatement),
        ("testUnsafeReadMethodIsolationOfStatementWithCheckpoint", testUnsafeReadMethodIsolationOfStatementWithCheckpoint),
        ("testWrappedReadWrite", testWrappedReadWrite),
        ("testWriteOpensATransaction", testWriteOpensATransaction),
        ("testWriteWithoutTransactionDoesNotOpenATransaction", testWriteWithoutTransactionDoesNotOpenATransaction),
    ]
}

extension DatabasePoolFunctionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabasePoolFunctionTests = [
        ("testFunctionIsSharedBetweenWriterAndReaders", testFunctionIsSharedBetweenWriterAndReaders),
    ]
}

extension DatabasePoolReadOnlyTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabasePoolReadOnlyTests = [
        ("testConcurrentRead", testConcurrentRead),
        ("testOpenReadOnlyMissingDatabase", testOpenReadOnlyMissingDatabase),
    ]
}

extension DatabasePoolReleaseMemoryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabasePoolReleaseMemoryTests = [
        ("testBlocksRetainConnection", testBlocksRetainConnection),
        ("testDatabasePoolDeinitClosesAllConnections", testDatabasePoolDeinitClosesAllConnections),
        ("testStatementDoNotRetainDatabaseConnection", testStatementDoNotRetainDatabaseConnection),
    ]
}

extension DatabasePoolSchemaCacheTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabasePoolSchemaCacheTests = [
        ("testCache", testCache),
        ("testCacheSnapshotIsolation", testCacheSnapshotIsolation),
        ("testUnsafeReaderHasDatabaseCache", testUnsafeReaderHasDatabaseCache),
    ]
}

extension DatabasePoolTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabasePoolTests = [
        ("testDatabasePoolCreatesWalShm", testDatabasePoolCreatesWalShm),
        ("testPersistentWALModeDisabled", testPersistentWALModeDisabled),
        ("testPersistentWALModeEnabled", testPersistentWALModeEnabled),
    ]
}

extension DatabaseQueueBackupTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseQueueBackupTests = [
        ("testBackup", testBackup),
    ]
}

extension DatabaseQueueInMemoryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseQueueInMemoryTests = [
        ("testInMemoryDatabase", testInMemoryDatabase),
    ]
}

extension DatabaseQueueReadOnlyTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseQueueReadOnlyTests = [
        ("testOpenReadOnlyMissingDatabase", testOpenReadOnlyMissingDatabase),
        ("testReadOnlyDatabaseCanNotBeModified", testReadOnlyDatabaseCanNotBeModified),
    ]
}

extension DatabaseQueueReleaseMemoryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseQueueReleaseMemoryTests = [
        ("testBlocksRetainConnection", testBlocksRetainConnection),
        ("testDatabaseQueueDeinitClosesConnection", testDatabaseQueueDeinitClosesConnection),
        ("testStatementDoNotRetainDatabaseConnection", testStatementDoNotRetainDatabaseConnection),
    ]
}

extension DatabaseQueueSchemaCacheTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseQueueSchemaCacheTests = [
        ("testCache", testCache),
    ]
}

extension DatabaseQueueTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseQueueTests = [
        ("testAddRemoveCollation", testAddRemoveCollation),
        ("testAddRemoveFunction", testAddRemoveFunction),
        ("testAllowsUnsafeTransactions", testAllowsUnsafeTransactions),
        ("testCustomLabel", testCustomLabel),
        ("testDefaultLabel", testDefaultLabel),
        ("testQoS", testQoS),
        ("testTargetQueue", testTargetQueue),
    ]
}

extension DatabaseReaderTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseReaderTests = [
        ("testAddCollation", testAddCollation),
        ("testAddFunction", testAddFunction),
        ("testAnyDatabaseReader", testAnyDatabaseReader),
        ("testAsyncRead", testAsyncRead),
        ("testAsyncReadPreventsDatabaseModification", testAsyncReadPreventsDatabaseModification),
        ("testBackup", testBackup),
        ("testReadCanRead", testReadCanRead),
        ("testReadPreventsDatabaseModification", testReadPreventsDatabaseModification),
        ("testUnsafeReadCanRead", testUnsafeReadCanRead),
        ("testUnsafeReentrantReadCanRead", testUnsafeReentrantReadCanRead),
        ("testUnsafeReentrantReadIsReentrant", testUnsafeReentrantReadIsReentrant),
    ]
}

extension DatabaseRegionObservationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseRegionObservationTests = [
        ("testDatabaseRegionDefaultExtent", testDatabaseRegionDefaultExtent),
        ("testDatabaseRegionExtentNextTransaction", testDatabaseRegionExtentNextTransaction),
        ("testDatabaseRegionObservationArray", testDatabaseRegionObservationArray),
        ("testDatabaseRegionObservationVariadic", testDatabaseRegionObservationVariadic),
    ]
}

extension DatabaseRegionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseRegionTests = [
        ("testDatabaseRegionOfDerivedRequests", testDatabaseRegionOfDerivedRequests),
        ("testDatabaseRegionOfJoinedRequests", testDatabaseRegionOfJoinedRequests),
        ("testDeleteStatement", testDeleteStatement),
        ("testInsertStatement", testInsertStatement),
        ("testIssue514", testIssue514),
        ("testRegionEquatable", testRegionEquatable),
        ("testRegionIntersection", testRegionIntersection),
        ("testRegionIntersectionOfColumnsAndRows", testRegionIntersectionOfColumnsAndRows),
        ("testRegionIsModifiedByDatabaseEvent", testRegionIsModifiedByDatabaseEvent),
        ("testRegionRowIds", testRegionRowIds),
        ("testRegionUnion", testRegionUnion),
        ("testRegionUnionOfColumnsAndRows", testRegionUnionOfColumnsAndRows),
        ("testRowIdNameInSelectStatement", testRowIdNameInSelectStatement),
        ("testRowIdNameInUpdateStatement", testRowIdNameInUpdateStatement),
        ("testSelectStatement", testSelectStatement),
        ("testUpdateStatement", testUpdateStatement),
        ("testUpdateStatementInvalidatesDatabaseSchemaCache", testUpdateStatementInvalidatesDatabaseSchemaCache),
    ]
}

extension DatabaseSavepointTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseSavepointTests = [
        ("testIsInsideTransaction", testIsInsideTransaction),
        ("testIsInsideTransactionWithImplicitRollback", testIsInsideTransactionWithImplicitRollback),
        ("testNestedSavepointFromDatabaseWithDefaultDeferredTransactions", testNestedSavepointFromDatabaseWithDefaultDeferredTransactions),
        ("testNestedSavepointFromDatabaseWithDefaultImmediateTransactions", testNestedSavepointFromDatabaseWithDefaultImmediateTransactions),
        ("testReleaseTopLevelSavepointFromDatabaseWithDefaultDeferredTransactions", testReleaseTopLevelSavepointFromDatabaseWithDefaultDeferredTransactions),
        ("testReleaseTopLevelSavepointFromDatabaseWithDefaultImmediateTransactions", testReleaseTopLevelSavepointFromDatabaseWithDefaultImmediateTransactions),
        ("testRollbackTopLevelSavepointFromDatabaseWithDefaultDeferredTransactions", testRollbackTopLevelSavepointFromDatabaseWithDefaultDeferredTransactions),
        ("testRollbackTopLevelSavepointFromDatabaseWithDefaultImmediateTransactions", testRollbackTopLevelSavepointFromDatabaseWithDefaultImmediateTransactions),
        ("testSubsequentSavepoints", testSubsequentSavepoints),
        ("testSubsequentSavepointsWithErrors", testSubsequentSavepointsWithErrors),
    ]
}

extension DatabaseSnapshotTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseSnapshotTests = [
        ("testAutomaticCheckpointDoesNotInvalidateSnapshot", testAutomaticCheckpointDoesNotInvalidateSnapshot),
        ("testCustomLabel", testCustomLabel),
        ("testDefaultLabel", testDefaultLabel),
        ("testFullCheckpointDoesNotInvalidateSnapshot", testFullCheckpointDoesNotInvalidateSnapshot),
        ("testPassiveCheckpointDoesNotInvalidateSnapshot", testPassiveCheckpointDoesNotInvalidateSnapshot),
        ("testRestartCheckpointDoesNotInvalidateSnapshot", testRestartCheckpointDoesNotInvalidateSnapshot),
        ("testSnapshotCanReadBeforeDatabaseModification", testSnapshotCanReadBeforeDatabaseModification),
        ("testSnapshotCollations", testSnapshotCollations),
        ("testSnapshotCreatedFromMainQueueCanRead", testSnapshotCreatedFromMainQueueCanRead),
        ("testSnapshotCreatedFromReaderOutsideOfTransactionCanRead", testSnapshotCreatedFromReaderOutsideOfTransactionCanRead),
        ("testSnapshotCreatedFromReaderTransactionCanRead", testSnapshotCreatedFromReaderTransactionCanRead),
        ("testSnapshotCreatedFromTransactionObserver", testSnapshotCreatedFromTransactionObserver),
        ("testSnapshotCreatedFromWriterOutsideOfTransactionCanRead", testSnapshotCreatedFromWriterOutsideOfTransactionCanRead),
        ("testSnapshotFunctions", testSnapshotFunctions),
        ("testSnapshotInheritPoolCollations", testSnapshotInheritPoolCollations),
        ("testSnapshotInheritPoolFunctions", testSnapshotInheritPoolFunctions),
        ("testSnapshotIsImmutable", testSnapshotIsImmutable),
        ("testSnapshotIsReadOnly", testSnapshotIsReadOnly),
        ("testSnapshotSchemaCache", testSnapshotSchemaCache),
        ("testTruncateCheckpointDoesNotInvalidateSnapshot", testTruncateCheckpointDoesNotInvalidateSnapshot),
    ]
}

extension DatabaseSuspensionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseSuspensionTests = [
        ("testJournalModeCache", testJournalModeCache),
        ("testResume", testResume),
        ("testSuspensionAbortsDatabaseQueueAccess", testSuspensionAbortsDatabaseQueueAccess),
        ("testSuspensionDoesNotPreventCommit", testSuspensionDoesNotPreventCommit),
        ("testSuspensionDoesNotPreventFurtherReadInWALMode", testSuspensionDoesNotPreventFurtherReadInWALMode),
        ("testSuspensionDoesNotPreventNewDeferredTransactionInWALMode", testSuspensionDoesNotPreventNewDeferredTransactionInWALMode),
        ("testSuspensionDoesNotPreventReadInWALMode", testSuspensionDoesNotPreventReadInWALMode),
        ("testSuspensionDoesNotPreventReleaseSavePoint", testSuspensionDoesNotPreventReleaseSavePoint),
        ("testSuspensionDoesNotPreventRollback", testSuspensionDoesNotPreventRollback),
        ("testSuspensionDoesNotPreventRollbackSavePoint", testSuspensionDoesNotPreventRollbackSavePoint),
        ("testSuspensionPreventsNewImmediateOrExclusiveTransactionInWALMode", testSuspensionPreventsNewImmediateOrExclusiveTransactionInWALMode),
        ("testSuspensionPreventsNewTransactionInDeleteJournalMode", testSuspensionPreventsNewTransactionInDeleteJournalMode),
        ("testSuspensionPreventsReadInDeleteJournalMode", testSuspensionPreventsReadInDeleteJournalMode),
        ("testSuspensionPreventsWriteInDeleteJournalMode", testSuspensionPreventsWriteInDeleteJournalMode),
        ("testSuspensionPreventsWriteInWALMode", testSuspensionPreventsWriteInWALMode),
        ("testSuspensionRollbacksOnPreventedWrite", testSuspensionRollbacksOnPreventedWrite),
        ("testWriteTransactionAbortedDuringStatementExecution", testWriteTransactionAbortedDuringStatementExecution),
        ("testWriteTransactionAbortedDuringStatementExecutionPreventsFurtherDatabaseAccess", testWriteTransactionAbortedDuringStatementExecutionPreventsFurtherDatabaseAccess),
    ]
}

extension DatabaseTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseTests = [
        ("testCreateTable", testCreateTable),
        ("testCreateTemporaryTable", testCreateTemporaryTable),
        ("testDatabaseCanBeUsedOutsideOfDatabaseQueueBlockAsLongAsTheQueueIsCorrect", testDatabaseCanBeUsedOutsideOfDatabaseQueueBlockAsLongAsTheQueueIsCorrect),
        ("testDatabaseExecute", testDatabaseExecute),
        ("testDatabaseExecuteChanges", testDatabaseExecuteChanges),
        ("testDatabaseExecuteWithArrayBinding", testDatabaseExecuteWithArrayBinding),
        ("testDatabaseExecuteWithDictionaryBinding", testDatabaseExecuteWithDictionaryBinding),
        ("testExplicitTransactionManagement", testExplicitTransactionManagement),
        ("testFailedCommitIsRollbacked", testFailedCommitIsRollbacked),
        ("testMultipleStatementsWithoutArguments", testMultipleStatementsWithoutArguments),
        ("testReadOnly", testReadOnly),
        ("testRowValueAtIndex", testRowValueAtIndex),
        ("testRowValueNamed", testRowValueNamed),
        ("testSelectStatement", testSelectStatement),
        ("testSelectStatementWithArrayBinding", testSelectStatementWithArrayBinding),
        ("testSelectStatementWithDictionaryBinding", testSelectStatementWithDictionaryBinding),
        ("testUpdateStatement", testUpdateStatement),
        ("testUpdateStatementWithArrayBinding", testUpdateStatementWithArrayBinding),
        ("testUpdateStatementWithDictionaryBinding", testUpdateStatementWithDictionaryBinding),
    ]
}

extension DatabaseTimestampTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseTimestampTests = [
        ("testDatabaseTimestamp", testDatabaseTimestamp),
    ]
}

extension DatabaseUUIDEncodingStrategyTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseUUIDEncodingStrategyTests = [
        ("testDeferredToUUID", testDeferredToUUID),
        ("testString", testString),
    ]
}

extension DatabaseValueConversionErrorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseValueConversionErrorTests = [
        ("testDecodableDatabaseValueConvertible", testDecodableDatabaseValueConvertible),
        ("testDecodableFetchableRecord1", testDecodableFetchableRecord1),
        ("testDecodableFetchableRecord2", testDecodableFetchableRecord2),
        ("testDecodableFetchableRecord3", testDecodableFetchableRecord3),
        ("testFetchableRecord1", testFetchableRecord1),
        ("testFetchableRecord2", testFetchableRecord2),
        ("testStatementColumnConvertible1", testStatementColumnConvertible1),
        ("testStatementColumnConvertible2", testStatementColumnConvertible2),
    ]
}

extension DatabaseValueConversionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseValueConversionTests = [
        ("testIntegerAffinity", testIntegerAffinity),
        ("testNoneAffinity", testNoneAffinity),
        ("testNumericAffinity", testNumericAffinity),
        ("testRealAffinity", testRealAffinity),
        ("testTextAffinity", testTextAffinity),
    ]
}

extension DatabaseValueConvertibleDecodableTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseValueConvertibleDecodableTests = [
        ("testCustomDatabaseValueConvertible", testCustomDatabaseValueConvertible),
        ("testDatabaseValueConvertibleImplementationDerivedFromDecodable1", testDatabaseValueConvertibleImplementationDerivedFromDecodable1),
        ("testDatabaseValueConvertibleImplementationDerivedFromDecodable2", testDatabaseValueConvertibleImplementationDerivedFromDecodable2),
        ("testDatabaseValueConvertibleImplementationDerivedFromDecodable3", testDatabaseValueConvertibleImplementationDerivedFromDecodable3),
        ("testDecodableRawRepresentableFetchingMethod", testDecodableRawRepresentableFetchingMethod),
    ]
}

extension DatabaseValueConvertibleEncodableTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseValueConvertibleEncodableTests = [
        ("testDatabaseValueConvertibleImplementationDerivedFromEncodable1", testDatabaseValueConvertibleImplementationDerivedFromEncodable1),
        ("testDatabaseValueConvertibleImplementationDerivedFromEncodable2", testDatabaseValueConvertibleImplementationDerivedFromEncodable2),
        ("testDatabaseValueConvertibleImplementationDerivedFromEncodable3", testDatabaseValueConvertibleImplementationDerivedFromEncodable3),
        ("testDateProperty", testDateProperty),
        ("testEncodableRawRepresentable", testEncodableRawRepresentable),
        ("testEncodableRawRepresentableEnum", testEncodableRawRepresentableEnum),
        ("testURLProperty", testURLProperty),
        ("testUUIDProperty", testUUIDProperty),
    ]
}

extension DatabaseValueConvertibleEscapingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseValueConvertibleEscapingTests = [
        ("testBlob", testBlob),
        ("testComplexExpression", testComplexExpression),
        ("testDouble", testDouble),
        ("testInteger", testInteger),
        ("testNull", testNull),
        ("testText", testText),
    ]
}

extension DatabaseValueConvertibleFetchTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseValueConvertibleFetchTests = [
        ("testFetchAll", testFetchAll),
        ("testFetchAllCompilationFailure", testFetchAllCompilationFailure),
        ("testFetchAllStepFailure", testFetchAllStepFailure),
        ("testFetchAllWithInterpolation", testFetchAllWithInterpolation),
        ("testFetchCursor", testFetchCursor),
        ("testFetchCursorCompilationFailure", testFetchCursorCompilationFailure),
        ("testFetchCursorStepFailure", testFetchCursorStepFailure),
        ("testFetchCursorWithInterpolation", testFetchCursorWithInterpolation),
        ("testFetchOne", testFetchOne),
        ("testFetchOneCompilationFailure", testFetchOneCompilationFailure),
        ("testFetchOneStepFailure", testFetchOneStepFailure),
        ("testFetchOneWithInterpolation", testFetchOneWithInterpolation),
        ("testOptionalFetchAll", testOptionalFetchAll),
        ("testOptionalFetchAllCompilationFailure", testOptionalFetchAllCompilationFailure),
        ("testOptionalFetchAllStepFailure", testOptionalFetchAllStepFailure),
        ("testOptionalFetchAllWithInterpolation", testOptionalFetchAllWithInterpolation),
        ("testOptionalFetchCursor", testOptionalFetchCursor),
        ("testOptionalFetchCursorCompilationFailure", testOptionalFetchCursorCompilationFailure),
        ("testOptionalFetchCursorStepFailure", testOptionalFetchCursorStepFailure),
        ("testOptionalFetchCursorWithInterpolation", testOptionalFetchCursorWithInterpolation),
    ]
}

extension DatabaseValueConvertibleSubclassTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseValueConvertibleSubclassTests = [
        ("testChild", testChild),
        ("testParent", testParent),
    ]
}

extension DatabaseValueTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseValueTests = [
        ("testDatabaseValueAsDatabaseValueConvertible", testDatabaseValueAsDatabaseValueConvertible),
        ("testDatabaseValueCanBeUsedAsStatementArgument", testDatabaseValueCanBeUsedAsStatementArgument),
        ("testDatabaseValueDescription", testDatabaseValueDescription),
        ("testDatabaseValueEquatable", testDatabaseValueEquatable),
        ("testDatabaseValueHash", testDatabaseValueHash),
    ]
}

extension DatabaseWriterTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DatabaseWriterTests = [
        ("testAnyDatabaseWriter", testAnyDatabaseWriter),
        ("testAsyncWriteError", testAsyncWriteError),
        ("testAsyncWriteSuccess", testAsyncWriteSuccess),
        ("testAsyncWriteWithoutTransactionError", testAsyncWriteWithoutTransactionError),
        ("testAsyncWriteWithoutTransactionSuccess", testAsyncWriteWithoutTransactionSuccess),
        ("testDatabasePoolUnsafeReentrantWrite", testDatabasePoolUnsafeReentrantWrite),
        ("testDatabaseQueueUnsafeReentrantWrite", testDatabaseQueueUnsafeReentrantWrite),
        ("testEraseAndVacuum", testEraseAndVacuum),
        ("testIssue424", testIssue424),
        ("testIssue424Minimal", testIssue424Minimal),
    ]
}

extension DerivableRequestTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DerivableRequestTests = [
        ("testFilteredRequest", testFilteredRequest),
        ("testJoinableRequest", testJoinableRequest),
        ("testOrderedRequest", testOrderedRequest),
        ("testSelectionRequest", testSelectionRequest),
        ("testTableRequestFilteredRequest", testTableRequestFilteredRequest),
    ]
}

extension DropFirstCursorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DropFirstCursorTests = [
        ("testDropFirstChain", testDropFirstChain),
        ("testDropFirstCursorFromCursor", testDropFirstCursorFromCursor),
        ("testDropFirstCursorFromThrowingCursor", testDropFirstCursorFromThrowingCursor),
    ]
}

extension DropWhileCursorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DropWhileCursorTests = [
        ("testDropWhileCursorFromCursor", testDropWhileCursorFromCursor),
        ("testDropWhileCursorFromThrowingCursor", testDropWhileCursorFromThrowingCursor),
    ]
}

extension EnumeratedCursorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__EnumeratedCursorTests = [
        ("testEnumeratedCursorFromCursor", testEnumeratedCursorFromCursor),
        ("testEnumeratedCursorFromThrowingCursor", testEnumeratedCursorFromThrowingCursor),
    ]
}

extension FTS3PatternTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FTS3PatternTests = [
        ("testFTS3PatternWithAllTokens", testFTS3PatternWithAllTokens),
        ("testFTS3PatternWithAnyToken", testFTS3PatternWithAnyToken),
        ("testFTS3PatternWithPhrase", testFTS3PatternWithPhrase),
        ("testInvalidFTS3Pattern", testInvalidFTS3Pattern),
        ("testValidFTS3Pattern", testValidFTS3Pattern),
    ]
}

extension FTS3RecordTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FTS3RecordTests = [
        ("testFetchCount", testFetchCount),
        ("testMatch", testMatch),
        ("testMatchNil", testMatchNil),
        ("testRowIdIsSelectedByDefault", testRowIdIsSelectedByDefault),
    ]
}

extension FTS3TableBuilderTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FTS3TableBuilderTests = [
        ("testColumns", testColumns),
        ("testOptions", testOptions),
        ("testPorterTokenizer", testPorterTokenizer),
        ("testSimpleTokenizer", testSimpleTokenizer),
        ("testUnicode61Tokenizer", testUnicode61Tokenizer),
        ("testUnicode61TokenizerDiacriticsKeep", testUnicode61TokenizerDiacriticsKeep),
        ("testUnicode61TokenizerSeparators", testUnicode61TokenizerSeparators),
        ("testUnicode61TokenizerTokenCharacters", testUnicode61TokenizerTokenCharacters),
        ("testWithoutBody", testWithoutBody),
    ]
}

extension FTS3TokenizerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FTS3TokenizerTests = [
        ("testPorterTokenizer", testPorterTokenizer),
        ("testSimpleTokenizer", testSimpleTokenizer),
        ("testUnicode61Tokenizer", testUnicode61Tokenizer),
        ("testUnicode61TokenizerDiacriticsKeep", testUnicode61TokenizerDiacriticsKeep),
        ("testUnicode61TokenizerSeparators", testUnicode61TokenizerSeparators),
        ("testUnicode61TokenizerTokenCharacters", testUnicode61TokenizerTokenCharacters),
    ]
}

extension FTS4RecordTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FTS4RecordTests = [
        ("testFetchCount", testFetchCount),
        ("testMatch", testMatch),
        ("testMatchNil", testMatchNil),
        ("testRowIdIsSelectedByDefault", testRowIdIsSelectedByDefault),
    ]
}

extension FTS4TableBuilderTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FTS4TableBuilderTests = [
        ("testColumns", testColumns),
        ("testFTS4Compression", testFTS4Compression),
        ("testFTS4Options", testFTS4Options),
        ("testFTS4Synchronization", testFTS4Synchronization),
        ("testFTS4SynchronizationCleanup", testFTS4SynchronizationCleanup),
        ("testFTS4SynchronizationCleanupWithLegacySupport", testFTS4SynchronizationCleanupWithLegacySupport),
        ("testNotIndexedColumns", testNotIndexedColumns),
        ("testOptions", testOptions),
        ("testPorterTokenizer", testPorterTokenizer),
        ("testSimpleTokenizer", testSimpleTokenizer),
        ("testUnicode61Tokenizer", testUnicode61Tokenizer),
        ("testUnicode61TokenizerDiacriticsKeep", testUnicode61TokenizerDiacriticsKeep),
        ("testUnicode61TokenizerSeparators", testUnicode61TokenizerSeparators),
        ("testUnicode61TokenizerTokenCharacters", testUnicode61TokenizerTokenCharacters),
        ("testWithoutBody", testWithoutBody),
    ]
}

extension FailureTestCase {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FailureTestCase = [
        ("testEmptyTest", testEmptyTest),
        ("testExactNumberOfRepetitionIsRequired", testExactNumberOfRepetitionIsRequired),
        ("testExpectedAnyFailure", testExpectedAnyFailure),
        ("testExpectedFailure", testExpectedFailure),
        ("testExpectedFailureCanBeRepeated", testExpectedFailureCanBeRepeated),
        ("testExpectedFailureMatchesOnPrefix", testExpectedFailureMatchesOnPrefix),
        ("testMissedFailure", testMissedFailure),
        ("testMissingAnyFailure", testMissingAnyFailure),
        ("testOrderOfExpectedFailureIsIgnored", testOrderOfExpectedFailureIsIgnored),
        ("testUnexpectedFailure", testUnexpectedFailure),
    ]
}

extension FetchRequestTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FetchRequestTests = [
        ("testFetchRequestDerivedFromPreparedRequest", testFetchRequestDerivedFromPreparedRequest),
        ("testFetchRequestInconsistency", testFetchRequestInconsistency),
        ("testRequestAsSQLCollection", testRequestAsSQLCollection),
        ("testRequestAsSQLExpression", testRequestAsSQLExpression),
        ("testRequestCustomizedFetchCount", testRequestCustomizedFetchCount),
        ("testRequestFetchCount", testRequestFetchCount),
        ("testRequestFetchRecords", testRequestFetchRecords),
        ("testRequestFetchRows", testRequestFetchRows),
        ("testRequestFetchValues", testRequestFetchValues),
        ("testRequestInterpolation", testRequestInterpolation),
        ("testSingleResultHint", testSingleResultHint),
        ("testSingleResultHintIsNotUsedForDefaultDatabaseRegion", testSingleResultHintIsNotUsedForDefaultDatabaseRegion),
        ("testSingleResultHintIsNotUsedForDefaultFetchCount", testSingleResultHintIsNotUsedForDefaultFetchCount),
        ("testSQLLiteralBasedFetchRequest", testSQLLiteralBasedFetchRequest),
    ]
}

extension FetchableRecordDecodableTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FetchableRecordDecodableTests = [
        ("testArrayOfDetachedRowsAsData", testArrayOfDetachedRowsAsData),
        ("testArrayOfDetachedRowsAsString", testArrayOfDetachedRowsAsString),
        ("testCodableExampleCode", testCodableExampleCode),
        ("testCursorRowsAsData", testCursorRowsAsData),
        ("testCursorRowsAsString", testCursorRowsAsString),
        ("testCustomDecodable", testCustomDecodable),
        ("testCustomFetchableRecord", testCustomFetchableRecord),
        ("testCustomizedRecord1", testCustomizedRecord1),
        ("testCustomizedRecord2", testCustomizedRecord2),
        ("testDatabaseValueConvertibleProperty", testDatabaseValueConvertibleProperty),
        ("testDecodableRawRepresentableProperty", testDecodableRawRepresentableProperty),
        ("testDetachedRows", testDetachedRows),
        ("testFoundationBehavior", testFoundationBehavior),
        ("testJSONDataEncodingStrategy", testJSONDataEncodingStrategy),
        ("testJSONDateEncodingStrategy", testJSONDateEncodingStrategy),
        ("testMissingKeys1", testMissingKeys1),
        ("testMissingKeys2", testMissingKeys2),
        ("testNonOptionalNestedArrayStruct", testNonOptionalNestedArrayStruct),
        ("testNonOptionalNestedStruct", testNonOptionalNestedStruct),
        ("testNonTrivialSingleValueDecodableProperty", testNonTrivialSingleValueDecodableProperty),
        ("testOptionalNestedArrayStruct", testOptionalNestedArrayStruct),
        ("testOptionalNestedArrayStructNil", testOptionalNestedArrayStructNil),
        ("testOptionalNestedStruct", testOptionalNestedStruct),
        ("testOptionalNestedStructNil", testOptionalNestedStructNil),
        ("testRecord1", testRecord1),
        ("testRecord2", testRecord2),
        ("testStructWithDate", testStructWithDate),
        ("testStructWithURL", testStructWithURL),
        ("testStructWithUUID", testStructWithUUID),
        ("testTrivialDecodable", testTrivialDecodable),
        ("testTrivialProperty", testTrivialProperty),
        ("testTrivialSingleValueDecodableProperty", testTrivialSingleValueDecodableProperty),
    ]
}

extension FetchableRecordQueryInterfaceRequestTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FetchableRecordQueryInterfaceRequestTests = [
        ("testAll", testAll),
        ("testAlternativeFetch", testAlternativeFetch),
        ("testFetch", testFetch),
    ]
}

extension FetchableRecordTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FetchableRecordTests = [
        ("testFetchAll", testFetchAll),
        ("testFetchAllCompilationFailure", testFetchAllCompilationFailure),
        ("testFetchAllStepFailure", testFetchAllStepFailure),
        ("testFetchAllWithInterpolation", testFetchAllWithInterpolation),
        ("testFetchCursor", testFetchCursor),
        ("testFetchCursorCompilationFailure", testFetchCursorCompilationFailure),
        ("testFetchCursorStepFailure", testFetchCursorStepFailure),
        ("testFetchCursorWithInterpolation", testFetchCursorWithInterpolation),
        ("testFetchOne", testFetchOne),
        ("testFetchOneCompilationFailure", testFetchOneCompilationFailure),
        ("testFetchOneStepFailure", testFetchOneStepFailure),
        ("testFetchOneWithInterpolation", testFetchOneWithInterpolation),
        ("testRowInitializer", testRowInitializer),
    ]
}

extension FetchedRecordsControllerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FetchedRecordsControllerTests = [
        ("testComplexChanges", testComplexChanges),
        ("testControllerFromRequest", testControllerFromRequest),
        ("testControllerFromSQL", testControllerFromSQL),
        ("testControllerFromSQLWithAdapter", testControllerFromSQLWithAdapter),
        ("testCustomRecordIdentity", testCustomRecordIdentity),
        ("testDatabaseChangesAreNotReReflectedUntilPerformFetchAndDelegateIsSet", testDatabaseChangesAreNotReReflectedUntilPerformFetchAndDelegateIsSet),
        ("testEmptyRequestGivesOneSection", testEmptyRequestGivesOneSection),
        ("testExternalTableChange", testExternalTableChange),
        ("testFetchAlongside", testFetchAlongside),
        ("testFetchErrors", testFetchErrors),
        ("testObservationOfSpecificRowIds", testObservationOfSpecificRowIds),
        ("testRequestChange", testRequestChange),
        ("testSections", testSections),
        ("testSetCallbacksAfterUpdate", testSetCallbacksAfterUpdate),
        ("testSideTableChange", testSideTableChange),
        ("testSimpleDelete", testSimpleDelete),
        ("testSimpleInsert", testSimpleInsert),
        ("testSimpleMove", testSimpleMove),
        ("testSimpleUpdate", testSimpleUpdate),
        ("testTrailingClosureCallback", testTrailingClosureCallback),
    ]
}

extension FilterCursorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FilterCursorTests = [
        ("testFilterCursorFromCursor", testFilterCursorFromCursor),
        ("testFilterCursorFromThrowingCursor", testFilterCursorFromThrowingCursor),
        ("testThrowingFilterCursorFromCursor", testThrowingFilterCursorFromCursor),
    ]
}

extension FlattenCursorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FlattenCursorTests = [
        ("testFlatMapOfCursor", testFlatMapOfCursor),
        ("testFlatMapOfSequence", testFlatMapOfSequence),
        ("testJoinedCursors", testJoinedCursors),
        ("testJoinedSequences", testJoinedSequences),
        ("testSequenceFlatMapOfCursor", testSequenceFlatMapOfCursor),
    ]
}

extension ForeignKeyInfoTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ForeignKeyInfoTests = [
        ("testForeignKeys", testForeignKeys),
    ]
}

extension FoundationDataTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FoundationDataTests = [
        ("testDataDatabaseRoundTrip", testDataDatabaseRoundTrip),
        ("testDataDatabaseValueRoundTrip", testDataDatabaseValueRoundTrip),
        ("testDataFromDatabaseValueFailure", testDataFromDatabaseValueFailure),
    ]
}

extension FoundationDateComponentsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FoundationDateComponentsTests = [
        ("testDatabaseDateComponentsFormatHM", testDatabaseDateComponentsFormatHM),
        ("testDatabaseDateComponentsFormatHMS", testDatabaseDateComponentsFormatHMS),
        ("testDatabaseDateComponentsFormatHMSS", testDatabaseDateComponentsFormatHMSS),
        ("testDatabaseDateComponentsFormatIso8601YMD_HM", testDatabaseDateComponentsFormatIso8601YMD_HM),
        ("testDatabaseDateComponentsFormatIso8601YMD_HMS", testDatabaseDateComponentsFormatIso8601YMD_HMS),
        ("testDatabaseDateComponentsFormatIso8601YMD_HMSS", testDatabaseDateComponentsFormatIso8601YMD_HMSS),
        ("testDatabaseDateComponentsFormatYMD_HM", testDatabaseDateComponentsFormatYMD_HM),
        ("testDatabaseDateComponentsFormatYMD_HMS", testDatabaseDateComponentsFormatYMD_HMS),
        ("testDatabaseDateComponentsFormatYMD_HMSS", testDatabaseDateComponentsFormatYMD_HMSS),
        ("testDatabaseDateComponentsFormatYMD", testDatabaseDateComponentsFormatYMD),
        ("testDatabaseDateComponentsFromUnparsableString", testDatabaseDateComponentsFromUnparsableString),
        ("testDatabaseDateComponentsParsing", testDatabaseDateComponentsParsing),
        ("testFormatYMD_HMSIsLexicallyComparableToCURRENT_TIMESTAMP", testFormatYMD_HMSIsLexicallyComparableToCURRENT_TIMESTAMP),
        ("testJSONDecodingOfDatabaseDateComponents", testJSONDecodingOfDatabaseDateComponents),
        ("testJSONEncodingOfDatabaseDateComponents", testJSONEncodingOfDatabaseDateComponents),
        ("testUndefinedDatabaseDateComponentsFormatYMD_HMSS", testUndefinedDatabaseDateComponentsFormatYMD_HMSS),
    ]
}

extension FoundationDateTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FoundationDateTests = [
        ("testDateAcceptsFormatIso8601YMD_HM", testDateAcceptsFormatIso8601YMD_HM),
        ("testDateAcceptsFormatIso8601YMD_HMS", testDateAcceptsFormatIso8601YMD_HMS),
        ("testDateAcceptsFormatIso8601YMD_HMSS", testDateAcceptsFormatIso8601YMD_HMSS),
        ("testDateAcceptsFormatYMD_HM", testDateAcceptsFormatYMD_HM),
        ("testDateAcceptsFormatYMD_HMS", testDateAcceptsFormatYMD_HMS),
        ("testDateAcceptsFormatYMD_HMSS", testDateAcceptsFormatYMD_HMSS),
        ("testDateAcceptsFormatYMD", testDateAcceptsFormatYMD),
        ("testDateAcceptsTimestamp", testDateAcceptsTimestamp),
        ("testDate", testDate),
        ("testDateDoesNotAcceptFormatHM", testDateDoesNotAcceptFormatHM),
        ("testDateDoesNotAcceptFormatHMS", testDateDoesNotAcceptFormatHMS),
        ("testDateDoesNotAcceptFormatHMSS", testDateDoesNotAcceptFormatHMSS),
        ("testDateFromJulianDayNumber", testDateFromJulianDayNumber),
        ("testDateFromUnparsableString", testDateFromUnparsableString),
        ("testDateIsLexicallyComparableToCURRENT_TIMESTAMP", testDateIsLexicallyComparableToCURRENT_TIMESTAMP),
    ]
}

extension FoundationNSDataTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FoundationNSDataTests = [
        ("testNSDataDatabaseRoundTrip", testNSDataDatabaseRoundTrip),
        ("testNSDataDatabaseValueRoundTrip", testNSDataDatabaseValueRoundTrip),
        ("testNSDataFromDatabaseValueFailure", testNSDataFromDatabaseValueFailure),
    ]
}

// extension FoundationNSDateTests {
//     // DO NOT MODIFY: This is autogenerated, use:
//     //   `swift test --generate-linuxmain`
//     // to regenerate.
//     static let __allTests__FoundationNSDateTests = [
//         ("testNSDateAcceptsFormatIso8601YMD_HM", testNSDateAcceptsFormatIso8601YMD_HM),
//         ("testNSDateAcceptsFormatIso8601YMD_HMS", testNSDateAcceptsFormatIso8601YMD_HMS),
//         ("testNSDateAcceptsFormatIso8601YMD_HMSS", testNSDateAcceptsFormatIso8601YMD_HMSS),
//         ("testNSDateAcceptsFormatYMD_HM", testNSDateAcceptsFormatYMD_HM),
//         ("testNSDateAcceptsFormatYMD_HMS", testNSDateAcceptsFormatYMD_HMS),
//         ("testNSDateAcceptsFormatYMD_HMSS", testNSDateAcceptsFormatYMD_HMSS),
//         ("testNSDateAcceptsFormatYMD", testNSDateAcceptsFormatYMD),
//         ("testNSDateAcceptsTimestamp", testNSDateAcceptsTimestamp),
//         ("testNSDate", testNSDate),
//         ("testNSDateDoesNotAcceptFormatHM", testNSDateDoesNotAcceptFormatHM),
//         ("testNSDateDoesNotAcceptFormatHMS", testNSDateDoesNotAcceptFormatHMS),
//         ("testNSDateDoesNotAcceptFormatHMSS", testNSDateDoesNotAcceptFormatHMSS),
//         ("testNSDateFromUnparsableString", testNSDateFromUnparsableString),
//         ("testNSDateIsLexicallyComparableToCURRENT_TIMESTAMP", testNSDateIsLexicallyComparableToCURRENT_TIMESTAMP),
//     ]
// }

// extension FoundationNSDecimalNumberTests {
//     // DO NOT MODIFY: This is autogenerated, use:
//     //   `swift test --generate-linuxmain`
//     // to regenerate.
//     static let __allTests__FoundationNSDecimalNumberTests = [
//         ("testNSDecimalNumberDecodingFromDouble", testNSDecimalNumberDecodingFromDouble),
//         ("testNSDecimalNumberDecodingFromInt64", testNSDecimalNumberDecodingFromInt64),
//         ("testNSDecimalNumberPreservesIntegerValues", testNSDecimalNumberPreservesIntegerValues),
//     ]
// }

extension FoundationNSNullTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FoundationNSNullTests = [
        ("testNSNullDatabaseValue", testNSNullDatabaseValue),
        ("testNSNullFromDatabaseValue", testNSNullFromDatabaseValue),
        ("testNSNullFromDatabaseValueFailure", testNSNullFromDatabaseValueFailure),
    ]
}

// extension FoundationNSNumberTests {
//     // DO NOT MODIFY: This is autogenerated, use:
//     //   `swift test --generate-linuxmain`
//     // to regenerate.
//     static let __allTests__FoundationNSNumberTests = [
//         ("testNSNumberDatabaseRoundTrip", testNSNumberDatabaseRoundTrip),
//         ("testNSNumberDatabaseValueRoundTrip", testNSNumberDatabaseValueRoundTrip),
//         ("testNSNumberDatabaseValueToSwiftType", testNSNumberDatabaseValueToSwiftType),
//         ("testNSNumberFromDatabaseValueFailure", testNSNumberFromDatabaseValueFailure),
//     ]
// }

extension FoundationNSStringTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FoundationNSStringTests = [
        ("testNSStringDatabaseRoundTrip", testNSStringDatabaseRoundTrip),
        ("testNSStringDatabaseValueRoundTrip", testNSStringDatabaseValueRoundTrip),
        ("testNSStringFromDatabaseValueFailure", testNSStringFromDatabaseValueFailure),
        ("testNSStringFromStringDatabaseValueSuccess", testNSStringFromStringDatabaseValueSuccess),
    ]
}

// extension FoundationNSURLTests {
//     // DO NOT MODIFY: This is autogenerated, use:
//     //   `swift test --generate-linuxmain`
//     // to regenerate.
//     static let __allTests__FoundationNSURLTests = [
//         ("testNSURLDatabaseRoundTrip", testNSURLDatabaseRoundTrip),
//         ("testNSURLDatabaseValueRoundTrip", testNSURLDatabaseValueRoundTrip),
//         ("testNSURLFromDatabaseValueFailure", testNSURLFromDatabaseValueFailure),
//     ]
// }

// extension FoundationNSUUIDTests {
//     // DO NOT MODIFY: This is autogenerated, use:
//     //   `swift test --generate-linuxmain`
//     // to regenerate.
//     static let __allTests__FoundationNSUUIDTests = [
//         ("testFailure", testFailure),
//         ("testSuccess", testSuccess),
//     ]
// }

extension FoundationURLTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FoundationURLTests = [
        ("testURLDatabaseRoundTrip", testURLDatabaseRoundTrip),
        ("testURLDatabaseValueRoundTrip", testURLDatabaseValueRoundTrip),
        ("testURLFromDatabaseValueFailure", testURLFromDatabaseValueFailure),
    ]
}

extension FoundationUUIDTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FoundationUUIDTests = [
        ("testFailure", testFailure),
        ("testSuccess", testSuccess),
    ]
}

extension IndexInfoTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__IndexInfoTests = [
        ("testColumnsThatUniquelyIdentityRows", testColumnsThatUniquelyIdentityRows),
        ("testIndexes", testIndexes),
    ]
}

extension InflectionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__InflectionsTests = [
        ("testDigitlessRadical", testDigitlessRadical),
        ("testPluralizeEmptyString", testPluralizeEmptyString),
        ("testPluralizePlurals", testPluralizePlurals),
        ("testStartIndexOfLastWord", testStartIndexOfLastWord),
        ("testUncountabilityOfASCIIWord", testUncountabilityOfASCIIWord),
        ("testUncountabilityOfNonASCIIWord", testUncountabilityOfNonASCIIWord),
        ("testUncountableCapitalizedWords", testUncountableCapitalizedWords),
        ("testUncountableUppercasedWords", testUncountableUppercasedWords),
        ("testUncountableWordIsNotGreedy", testUncountableWordIsNotGreedy),
        ("testUncountableWords", testUncountableWords),
    ]
}

extension JoinSupportTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__JoinSupportTests = [
        ("testCodableFlatModel", testCodableFlatModel),
        ("testCodableFlatModelFromHierarchicalRequest", testCodableFlatModelFromHierarchicalRequest),
        ("testCodableNestedModel", testCodableNestedModel),
        ("testFlatModel", testFlatModel),
        ("testFlatModelFromHierarchicalRequest", testFlatModelFromHierarchicalRequest),
        ("testSampleData", testSampleData),
        ("testSplittingRowAdapters", testSplittingRowAdapters),
        ("testTestedSQL", testTestedSQL),
    ]
}

extension MapCursorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MapCursorTests = [
        ("testMap", testMap),
        ("testMapThrowingCursor", testMapThrowingCursor),
    ]
}

extension MutablePersistableRecordChangesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MutablePersistableRecordChangesTests = [
        ("testDatabaseEqualsWithDifferentTypesAndDifferentWidth", testDatabaseEqualsWithDifferentTypesAndDifferentWidth),
        ("testDatabaseEqualsWithSelf", testDatabaseEqualsWithSelf),
        ("testDegenerateDatabaseEqualsWithSelf", testDegenerateDatabaseEqualsWithSelf),
        ("testRecordValueChange", testRecordValueChange),
        ("testUpdateChangesWithImmutableStruct", testUpdateChangesWithImmutableStruct),
        ("testUpdateChangesWithMutableStruct", testUpdateChangesWithMutableStruct),
        ("testUpdateChangesWithNonRecordClass", testUpdateChangesWithNonRecordClass),
        ("testUpdateChangesWithRecord", testUpdateChangesWithRecord),
    ]
}

extension MutablePersistableRecordDeleteTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MutablePersistableRecordDeleteTests = [
        ("testGroupedRequestDelete", testGroupedRequestDelete),
        ("testImplicitRowIDPrimaryKey", testImplicitRowIDPrimaryKey),
        ("testImplicitUniqueIndexOnSingleColumnPrimaryKey", testImplicitUniqueIndexOnSingleColumnPrimaryKey),
        ("testJoinedRequestDelete", testJoinedRequestDelete),
        ("testMultipleColumnPrimaryKey", testMultipleColumnPrimaryKey),
        ("testRequestDelete", testRequestDelete),
        ("testSingleColumnPrimaryKey", testSingleColumnPrimaryKey),
        ("testUniqueIndex", testUniqueIndex),
    ]
}

extension MutablePersistableRecordEncodableTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MutablePersistableRecordEncodableTests = [
        ("testArrayJSONEncoding", testArrayJSONEncoding),
        ("testCustomEncodable", testCustomEncodable),
        ("testCustomizedRecord", testCustomizedRecord),
        ("testCustomMutablePersistableRecord", testCustomMutablePersistableRecord),
        ("testDatabaseValueConvertibleProperty", testDatabaseValueConvertibleProperty),
        ("testDictionaryJSONEncoding", testDictionaryJSONEncoding),
        ("testEncodableRawRepresentableProperty", testEncodableRawRepresentableProperty),
        ("testFoundationBehavior", testFoundationBehavior),
        ("testJSONDataEncodingStrategy", testJSONDataEncodingStrategy),
        ("testJSONDateEncodingStrategy", testJSONDateEncodingStrategy),
        ("testNonTrivialSingleValueEncodableProperty", testNonTrivialSingleValueEncodableProperty),
        ("testOptionalArrayJSONEncoding", testOptionalArrayJSONEncoding),
        ("testOptionalDictionaryJSONEncoding", testOptionalDictionaryJSONEncoding),
        ("testRecord", testRecord),
        ("testStructWithDate", testStructWithDate),
        ("testStructWithURL", testStructWithURL),
        ("testStructWithUUID", testStructWithUUID),
        ("testTrivialEncodable", testTrivialEncodable),
        ("testTrivialProperty", testTrivialProperty),
        ("testTrivialSingleValueEncodableProperty", testTrivialSingleValueEncodableProperty),
    ]
}

extension MutablePersistableRecordPersistenceConflictPolicyTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MutablePersistableRecordPersistenceConflictPolicyTests = [
        ("testAbortPolicy", testAbortPolicy),
        ("testDefaultPolicy", testDefaultPolicy),
        ("testFailPolicy", testFailPolicy),
        ("testIgnorePolicy", testIgnorePolicy),
        ("testMixedPolicy", testMixedPolicy),
        ("testPolicyDefaultArguments", testPolicyDefaultArguments),
        ("testReplacePolicy", testReplacePolicy),
        ("testRollbackPolicy", testRollbackPolicy),
    ]
}

extension MutablePersistableRecordTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MutablePersistableRecordTests = [
        ("testDeleteMutablePersistableRecordCountry", testDeleteMutablePersistableRecordCountry),
        ("testDeleteMutablePersistableRecordCustomizedCountry", testDeleteMutablePersistableRecordCustomizedCountry),
        ("testDeleteMutablePersistableRecordPerson", testDeleteMutablePersistableRecordPerson),
        ("testExistsMutablePersistableRecordCountry", testExistsMutablePersistableRecordCountry),
        ("testExistsMutablePersistableRecordCustomizedCountry", testExistsMutablePersistableRecordCustomizedCountry),
        ("testExistsMutablePersistableRecordPerson", testExistsMutablePersistableRecordPerson),
        ("testInsertMutablePersistableRecordCountry", testInsertMutablePersistableRecordCountry),
        ("testInsertMutablePersistableRecordCustomizedCountry", testInsertMutablePersistableRecordCustomizedCountry),
        ("testInsertMutablePersistableRecordPerson", testInsertMutablePersistableRecordPerson),
        ("testMutablePersistableRecordPersonDatabaseDictionary", testMutablePersistableRecordPersonDatabaseDictionary),
        ("testPartiallyEncodedRecord", testPartiallyEncodedRecord),
        ("testPartialUpdateMutablePersistableRecordPerson", testPartialUpdateMutablePersistableRecordPerson),
        ("testPersistenceErrorRecordNotFoundDescription", testPersistenceErrorRecordNotFoundDescription),
        ("testSaveMutablePersistableRecordCountry", testSaveMutablePersistableRecordCountry),
        ("testSaveMutablePersistableRecordCustomizedCountry", testSaveMutablePersistableRecordCustomizedCountry),
        ("testSaveMutablePersistableRecordPerson", testSaveMutablePersistableRecordPerson),
        ("testUpdateMutablePersistableRecordCountry", testUpdateMutablePersistableRecordCountry),
        ("testUpdateMutablePersistableRecordCustomizedCountry", testUpdateMutablePersistableRecordCustomizedCountry),
        ("testUpdateMutablePersistableRecordPerson", testUpdateMutablePersistableRecordPerson),
    ]
}

extension MutablePersistableRecordUpdateTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MutablePersistableRecordUpdateTests = [
        ("testAssignmentAddAndAssign", testAssignmentAddAndAssign),
        ("testAssignmentDivideAndAssign", testAssignmentDivideAndAssign),
        ("testAssignmentMultiplyAndAssign", testAssignmentMultiplyAndAssign),
        ("testAssignmentSubtractAndAssign", testAssignmentSubtractAndAssign),
        ("testComplexAssignment", testComplexAssignment),
        ("testConflictPolicyAbort", testConflictPolicyAbort),
        ("testConflictPolicyCustom", testConflictPolicyCustom),
        ("testConflictPolicyIgnore", testConflictPolicyIgnore),
        ("testGroupedRequestUpdate", testGroupedRequestUpdate),
        ("testJoinedRequestUpdate", testJoinedRequestUpdate),
        ("testMultipleAssignments", testMultipleAssignments),
        ("testNilAssignment", testNilAssignment),
        ("testQueryInterfaceExtension", testQueryInterfaceExtension),
        ("testRequestUpdateAll", testRequestUpdateAll),
        ("testUpdateAllReturnsNumberOfUpdatedRows", testUpdateAllReturnsNumberOfUpdatedRows),
        ("testUpdateAllWithoutAssignmentDoesNotAccessTheDatabase", testUpdateAllWithoutAssignmentDoesNotAccessTheDatabase),
    ]
}

extension NumericOverflowTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__NumericOverflowTests = [
        ("testHighInt32FromDoubleOverflows", testHighInt32FromDoubleOverflows),
        ("testHighInt64FromDoubleOverflows", testHighInt64FromDoubleOverflows),
        ("testHighIntFromDoubleOverflows", testHighIntFromDoubleOverflows),
        ("testLowInt32FromDoubleOverflows", testLowInt32FromDoubleOverflows),
        ("testLowInt64FromDoubleOverflows", testLowInt64FromDoubleOverflows),
        ("testLowIntFromDoubleOverflows", testLowIntFromDoubleOverflows),
    ]
}

extension OrderedDictionaryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__OrderedDictionaryTests = [
        ("testSubscriptWithDefaultValue", testSubscriptWithDefaultValue),
    ]
}

extension PersistableRecordTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PersistableRecordTests = [
        ("testDeletePersistableRecordCountry", testDeletePersistableRecordCountry),
        ("testDeletePersistableRecordCustomizedCountry", testDeletePersistableRecordCustomizedCountry),
        ("testDeletePersistableRecordPersonClass", testDeletePersistableRecordPersonClass),
        ("testExistsPersistableRecordCountry", testExistsPersistableRecordCountry),
        ("testExistsPersistableRecordCustomizedCountry", testExistsPersistableRecordCustomizedCountry),
        ("testExistsPersistableRecordPersonClass", testExistsPersistableRecordPersonClass),
        ("testInsertErrorDoesNotPreventSubsequentInserts", testInsertErrorDoesNotPreventSubsequentInserts),
        ("testInsertPersistableRecordCountry", testInsertPersistableRecordCountry),
        ("testInsertPersistableRecordCustomizedCountry", testInsertPersistableRecordCustomizedCountry),
        ("testInsertPersistableRecordPerson", testInsertPersistableRecordPerson),
        ("testInsertPersistableRecordPersonClass", testInsertPersistableRecordPersonClass),
        ("testNonOptionalNestedArrayStruct", testNonOptionalNestedArrayStruct),
        ("testNonOptionalNestedStruct", testNonOptionalNestedStruct),
        ("testOptionalNestedArrayStruct", testOptionalNestedArrayStruct),
        ("testOptionalNestedArrayStructNil", testOptionalNestedArrayStructNil),
        ("testOptionalNestedStruct", testOptionalNestedStruct),
        ("testOptionalNestedStructNil", testOptionalNestedStructNil),
        ("testOptionalStringStoredInArray", testOptionalStringStoredInArray),
        ("testPartialUpdatePersistableRecordCountry", testPartialUpdatePersistableRecordCountry),
        ("testPartialUpdatePersistableRecordCustomizedCountry", testPartialUpdatePersistableRecordCustomizedCountry),
        ("testPartialUpdatePersistableRecordPersonClass", testPartialUpdatePersistableRecordPersonClass),
        ("testSavePersistableRecordCountry", testSavePersistableRecordCountry),
        ("testSavePersistableRecordCustomizedCountry", testSavePersistableRecordCustomizedCountry),
        ("testSavePersistableRecordPerson", testSavePersistableRecordPerson),
        ("testSavePersistableRecordPersonClass", testSavePersistableRecordPersonClass),
        ("testStringStoredInArray", testStringStoredInArray),
        ("testUpdatePersistableRecordCountry", testUpdatePersistableRecordCountry),
        ("testUpdatePersistableRecordCustomizedCountry", testUpdatePersistableRecordCustomizedCountry),
        ("testUpdatePersistableRecordPersonClass", testUpdatePersistableRecordPersonClass),
    ]
}

extension PoolTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PoolTests = [
        ("testBarrierIsLockedByOneUsedElementOutOfOne", testBarrierIsLockedByOneUsedElementOutOfOne),
        ("testBarrierIsLockedByOneUsedElementOutOfTwo", testBarrierIsLockedByOneUsedElementOutOfTwo),
        ("testBarrierIsLockedByTwoUsedElementsOutOfTwo", testBarrierIsLockedByTwoUsedElementsOutOfTwo),
        ("testBarrierLocksElements", testBarrierLocksElements),
        ("testBarrierRemoveAll", testBarrierRemoveAll),
        ("testElementsAreReused", testElementsAreReused),
        ("testRemoveAll", testRemoveAll),
    ]
}

extension PrefixCursorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PrefixCursorTests = [
        ("testPrefixCursorChain", testPrefixCursorChain),
        ("testPrefixCursorFromCursor", testPrefixCursorFromCursor),
        ("testPrefixCursorFromThrowingCursor", testPrefixCursorFromThrowingCursor),
    ]
}

extension PrefixWhileCursorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PrefixWhileCursorTests = [
        ("testPrefixWhileCursorFromCursor", testPrefixWhileCursorFromCursor),
        ("testPrefixWhileCursorFromThrowingCursor", testPrefixWhileCursorFromThrowingCursor),
    ]
}

extension PrimaryKeyInfoTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PrimaryKeyInfoTests = [
        ("testCompoundPrimaryKey", testCompoundPrimaryKey),
        ("testHiddenRowID", testHiddenRowID),
        ("testIntegerPrimaryKey", testIntegerPrimaryKey),
        ("testNonRowIDPrimaryKey", testNonRowIDPrimaryKey),
    ]
}

extension QueryInterfaceExpressionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__QueryInterfaceExpressionsTests = [
        ("testAvgExpression", testAvgExpression),
        ("testCompoundArithmeticExpression", testCompoundArithmeticExpression),
        ("testConcatOperator", testConcatOperator),
        ("testContains", testContains),
        ("testContainsWithCollation", testContainsWithCollation),
        ("testCountExpression", testCountExpression),
        ("testCustomFunction", testCustomFunction),
        ("testEqual", testEqual),
        ("testEqualWithCollation", testEqualWithCollation),
        ("testGreaterThan", testGreaterThan),
        ("testGreaterThanOrEqual", testGreaterThanOrEqual),
        ("testGreaterThanOrEqualWithCollation", testGreaterThanOrEqualWithCollation),
        ("testGreaterThanWithCollation", testGreaterThanWithCollation),
        ("testIfNull", testIfNull),
        ("testInfixAddOperator", testInfixAddOperator),
        ("testInfixDivideOperator", testInfixDivideOperator),
        ("testInfixMultiplyOperator", testInfixMultiplyOperator),
        ("testInfixSubtractOperator", testInfixSubtractOperator),
        ("testIs", testIs),
        ("testIsNot", testIsNot),
        ("testIsNotWithCollation", testIsNotWithCollation),
        ("testIsNotWithSwiftNotOperator", testIsNotWithSwiftNotOperator),
        ("testIsWithCollation", testIsWithCollation),
        ("testJoinedAddOperator", testJoinedAddOperator),
        ("testJoinedMultiplyOperator", testJoinedMultiplyOperator),
        ("testJoinedOperatorAnd", testJoinedOperatorAnd),
        ("testJoinedOperatorOr", testJoinedOperatorOr),
        ("testLengthExpression", testLengthExpression),
        ("testLessThan", testLessThan),
        ("testLessThanOrEqual", testLessThanOrEqual),
        ("testLessThanOrEqualWithCollation", testLessThanOrEqualWithCollation),
        ("testLessThanWithCollation", testLessThanWithCollation),
        ("testLikeOperator", testLikeOperator),
        ("testLogicalOperators", testLogicalOperators),
        ("testMaxExpression", testMaxExpression),
        ("testMinExpression", testMinExpression),
        ("testNotEqual", testNotEqual),
        ("testNotEqualWithCollation", testNotEqualWithCollation),
        ("testNotEqualWithSwiftNotOperator", testNotEqualWithSwiftNotOperator),
        ("testPrefixMinusOperator", testPrefixMinusOperator),
        ("testStringFunctions", testStringFunctions),
        ("testSubqueryContains", testSubqueryContains),
        ("testSubqueryEqual", testSubqueryEqual),
        ("testSubqueryWithOuterAlias", testSubqueryWithOuterAlias),
        ("testSumExpression", testSumExpression),
    ]
}

extension QueryInterfaceExtensibilityTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__QueryInterfaceExtensibilityTests = [
        ("testCast", testCast),
        ("testMatch", testMatch),
        ("testStrftime", testStrftime),
    ]
}

extension QueryInterfacePromiseTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__QueryInterfacePromiseTests = [
        ("testFilterKeyCapturesTableName", testFilterKeyCapturesTableName),
        ("testGroupByPrimaryKeyCapturesTableName", testGroupByPrimaryKeyCapturesTableName),
        ("testOrderByPrimaryKeyCapturesTableName", testOrderByPrimaryKeyCapturesTableName),
        ("testSourceTableIsCapturedInTheRequestAndNotInTheTypeOfTheFetchedRecord", testSourceTableIsCapturedInTheRequestAndNotInTheTypeOfTheFetchedRecord),
    ]
}

extension QueryInterfaceRequestTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__QueryInterfaceRequestTests = [
        ("testAnnotated", testAnnotated),
        ("testAnnotatedWithForeignColumn", testAnnotatedWithForeignColumn),
        ("testDistinct", testDistinct),
        ("testFetchCount", testFetchCount),
        ("testFetchRowFromRequest", testFetchRowFromRequest),
        ("testFilter", testFilter),
        ("testFilterLiteral", testFilterLiteral),
        ("testFilterLiteralWithMixedArguments", testFilterLiteralWithMixedArguments),
        ("testFilterLiteralWithNamedArguments", testFilterLiteralWithNamedArguments),
        ("testFilterLiteralWithPositionalArguments", testFilterLiteralWithPositionalArguments),
        ("testGroup", testGroup),
        ("testGroupLiteral", testGroupLiteral),
        ("testGroupLiteralWithNamedArguments", testGroupLiteralWithNamedArguments),
        ("testGroupLiteralWithPositionalArguments", testGroupLiteralWithPositionalArguments),
        ("testHaving", testHaving),
        ("testHavingLiteral", testHavingLiteral),
        ("testHavingLiteralWithNamedArguments", testHavingLiteralWithNamedArguments),
        ("testHavingLiteralWithPositionalArguments", testHavingLiteralWithPositionalArguments),
        ("testLimit", testLimit),
        ("testMultipleFilter", testMultipleFilter),
        ("testMultipleGroup", testMultipleGroup),
        ("testMultipleHaving", testMultipleHaving),
        ("testMultipleLimit", testMultipleLimit),
        ("testMultipleReverse", testMultipleReverse),
        ("testMultipleSelect", testMultipleSelect),
        ("testMultipleSort", testMultipleSort),
        ("testReverse", testReverse),
        ("testReverseWithCollation", testReverseWithCollation),
        ("testSelect", testSelect),
        ("testSelectAs", testSelectAs),
        ("testSelectAsTypeInference", testSelectAsTypeInference),
        ("testSelectionCustomKey", testSelectionCustomKey),
        ("testSelectLiteral", testSelectLiteral),
        ("testSelectLiteralWithNamedArguments", testSelectLiteralWithNamedArguments),
        ("testSelectLiteralWithPositionalArguments", testSelectLiteralWithPositionalArguments),
        ("testSelectSQLLiteral", testSelectSQLLiteral),
        ("testSimpleRequestDoesNotUseAnyRowAdapter", testSimpleRequestDoesNotUseAnyRowAdapter),
        ("testSort", testSort),
        ("testSortLiteral", testSortLiteral),
        ("testSortLiteralWithNamedArguments", testSortLiteralWithNamedArguments),
        ("testSortLiteralWithPositionalArguments", testSortLiteralWithPositionalArguments),
        ("testSortWithCollation", testSortWithCollation),
    ]
}

extension RawRepresentableDatabaseValueConvertibleTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RawRepresentableDatabaseValueConvertibleTests = [
        ("testColor32", testColor32),
        ("testColor64", testColor64),
        ("testColor", testColor),
        ("testGrape", testGrape),
    ]
}

extension RecordCopyTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RecordCopyTests = [
        ("testRecordCopy", testRecordCopy),
    ]
}

extension RecordEditedTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RecordEditedTests = [
        ("testChangesAfterFullFetch", testChangesAfterFullFetch),
        ("testChangesAfterInit", testChangesAfterInit),
        ("testChangesAfterInitFromRow", testChangesAfterInitFromRow),
        ("testChangesAfterInsert", testChangesAfterInsert),
        ("testChangesAfterPartialFetch", testChangesAfterPartialFetch),
        ("testChangesAfterPrimaryKeyChange", testChangesAfterPrimaryKeyChange),
        ("testChangesAfterSave", testChangesAfterSave),
        ("testChangesAfterUpdate", testChangesAfterUpdate),
        ("testChangesAfterValueChange", testChangesAfterValueChange),
        ("testCopyTransfersChanges", testCopyTransfersChanges),
        ("testCopyTransfersEditedFlag", testCopyTransfersEditedFlag),
        ("testRecordIsEditedAfterInit", testRecordIsEditedAfterInit),
        ("testRecordIsEditedAfterInitFromRow", testRecordIsEditedAfterInitFromRow),
        ("testRecordIsEditedAfterPartialFetch", testRecordIsEditedAfterPartialFetch),
        ("testRecordIsEditedAfterPrimaryKeyChange", testRecordIsEditedAfterPrimaryKeyChange),
        ("testRecordIsEditedAfterValueChange", testRecordIsEditedAfterValueChange),
        ("testRecordIsNotEditedAfterFullFetch", testRecordIsNotEditedAfterFullFetch),
        ("testRecordIsNotEditedAfterFullFetchWithIntegerPropertyOnRealAffinityColumn", testRecordIsNotEditedAfterFullFetchWithIntegerPropertyOnRealAffinityColumn),
        ("testRecordIsNotEditedAfterInsert", testRecordIsNotEditedAfterInsert),
        ("testRecordIsNotEditedAfterSameValueChange", testRecordIsNotEditedAfterSameValueChange),
        ("testRecordIsNotEditedAfterSave", testRecordIsNotEditedAfterSave),
        ("testRecordIsNotEditedAfterUpdate", testRecordIsNotEditedAfterUpdate),
        ("testRecordIsNotEditedAfterWiderThanFullFetch", testRecordIsNotEditedAfterWiderThanFullFetch),
        ("testUpdateChanges", testUpdateChanges),
    ]
}

extension RecordInitializersTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RecordInitializersTests = [
        ("testFetchedRecordAreInitializedFromRow", testFetchedRecordAreInitializedFromRow),
    ]
}

extension RecordMinimalPrimaryKeyRowIDTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RecordMinimalPrimaryKeyRowIDTests = [
        ("testDeleteAfterDeleteDoesNothing", testDeleteAfterDeleteDoesNothing),
        ("testDeleteWithNotNilPrimaryKeyThatDoesNotMatchAnyRowDoesNothing", testDeleteWithNotNilPrimaryKeyThatDoesNotMatchAnyRowDoesNothing),
        ("testDeleteWithNotNilPrimaryKeyThatMatchesARowDeletesThatRow", testDeleteWithNotNilPrimaryKeyThatMatchesARowDeletesThatRow),
        ("testExistsAfterDeleteReturnsTrue", testExistsAfterDeleteReturnsTrue),
        ("testExistsWithNotNilPrimaryKeyThatDoesNotMatchAnyRowReturnsFalse", testExistsWithNotNilPrimaryKeyThatDoesNotMatchAnyRowReturnsFalse),
        ("testExistsWithNotNilPrimaryKeyThatMatchesARowReturnsTrue", testExistsWithNotNilPrimaryKeyThatMatchesARowReturnsTrue),
        ("testFetchAllWithKeys", testFetchAllWithKeys),
        ("testFetchAllWithKeysRequest", testFetchAllWithKeysRequest),
        ("testFetchAllWithPrimaryKeys", testFetchAllWithPrimaryKeys),
        ("testFetchAllWithPrimaryKeysRequest", testFetchAllWithPrimaryKeysRequest),
        ("testFetchCursorWithKeys", testFetchCursorWithKeys),
        ("testFetchCursorWithKeysRequest", testFetchCursorWithKeysRequest),
        ("testFetchCursorWithPrimaryKeys", testFetchCursorWithPrimaryKeys),
        ("testFetchCursorWithPrimaryKeysRequest", testFetchCursorWithPrimaryKeysRequest),
        ("testFetchOneWithKey", testFetchOneWithKey),
        ("testFetchOneWithKeyRequest", testFetchOneWithKeyRequest),
        ("testFetchOneWithPrimaryKey", testFetchOneWithPrimaryKey),
        ("testFetchOneWithPrimaryKeyRequest", testFetchOneWithPrimaryKeyRequest),
        ("testInsertAfterDeleteInsertsARow", testInsertAfterDeleteInsertsARow),
        ("testInsertWithNilPrimaryKeyInsertsARowAndSetsPrimaryKey", testInsertWithNilPrimaryKeyInsertsARowAndSetsPrimaryKey),
        ("testInsertWithNotNilPrimaryKeyThatDoesNotMatchAnyRowInsertsARow", testInsertWithNotNilPrimaryKeyThatDoesNotMatchAnyRowInsertsARow),
        ("testInsertWithNotNilPrimaryKeyThatMatchesARowThrowsDatabaseError", testInsertWithNotNilPrimaryKeyThatMatchesARowThrowsDatabaseError),
        ("testOrderByPrimaryKey", testOrderByPrimaryKey),
        ("testSaveAfterDeleteInsertsARow", testSaveAfterDeleteInsertsARow),
        ("testSaveWithNilPrimaryKeyInsertsARowAndSetsPrimaryKey", testSaveWithNilPrimaryKeyInsertsARowAndSetsPrimaryKey),
        ("testSaveWithNotNilPrimaryKeyThatDoesNotMatchAnyRowInsertsARow", testSaveWithNotNilPrimaryKeyThatDoesNotMatchAnyRowInsertsARow),
        ("testSaveWithNotNilPrimaryKeyThatMatchesARowUpdatesThatRow", testSaveWithNotNilPrimaryKeyThatMatchesARowUpdatesThatRow),
        ("testUpdateAfterDeleteThrowsRecordNotFound", testUpdateAfterDeleteThrowsRecordNotFound),
        ("testUpdateWithNotNilPrimaryKeyThatDoesNotMatchAnyRowThrowsRecordNotFound", testUpdateWithNotNilPrimaryKeyThatDoesNotMatchAnyRowThrowsRecordNotFound),
        ("testUpdateWithNotNilPrimaryKeyThatMatchesARowUpdatesThatRow", testUpdateWithNotNilPrimaryKeyThatMatchesARowUpdatesThatRow),
    ]
}

extension RecordMinimalPrimaryKeySingleTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RecordMinimalPrimaryKeySingleTests = [
        ("testDeleteAfterDeleteDoesNothing", testDeleteAfterDeleteDoesNothing),
        ("testDeleteWithNotNilPrimaryKeyThatDoesNotMatchAnyRowDoesNothing", testDeleteWithNotNilPrimaryKeyThatDoesNotMatchAnyRowDoesNothing),
        ("testDeleteWithNotNilPrimaryKeyThatMatchesARowDeletesThatRow", testDeleteWithNotNilPrimaryKeyThatMatchesARowDeletesThatRow),
        ("testExistsAfterDeleteReturnsTrue", testExistsAfterDeleteReturnsTrue),
        ("testExistsWithNotNilPrimaryKeyThatDoesNotMatchAnyRowReturnsFalse", testExistsWithNotNilPrimaryKeyThatDoesNotMatchAnyRowReturnsFalse),
        ("testExistsWithNotNilPrimaryKeyThatMatchesARowReturnsTrue", testExistsWithNotNilPrimaryKeyThatMatchesARowReturnsTrue),
        ("testFetchAllWithKeys", testFetchAllWithKeys),
        ("testFetchAllWithKeysRequest", testFetchAllWithKeysRequest),
        ("testFetchAllWithPrimaryKeys", testFetchAllWithPrimaryKeys),
        ("testFetchAllWithPrimaryKeysRequest", testFetchAllWithPrimaryKeysRequest),
        ("testFetchCursorWithKeys", testFetchCursorWithKeys),
        ("testFetchCursorWithKeysRequest", testFetchCursorWithKeysRequest),
        ("testFetchCursorWithPrimaryKeys", testFetchCursorWithPrimaryKeys),
        ("testFetchCursorWithPrimaryKeysRequest", testFetchCursorWithPrimaryKeysRequest),
        ("testFetchOneWithKey", testFetchOneWithKey),
        ("testFetchOneWithKeyRequest", testFetchOneWithKeyRequest),
        ("testFetchOneWithPrimaryKey", testFetchOneWithPrimaryKey),
        ("testFetchOneWithPrimaryKeyRequest", testFetchOneWithPrimaryKeyRequest),
        ("testInsertAfterDeleteInsertsARow", testInsertAfterDeleteInsertsARow),
        ("testInsertWithNilPrimaryKeyThrowsDatabaseError", testInsertWithNilPrimaryKeyThrowsDatabaseError),
        ("testInsertWithNotNilPrimaryKeyThatDoesNotMatchAnyRowInsertsARow", testInsertWithNotNilPrimaryKeyThatDoesNotMatchAnyRowInsertsARow),
        ("testInsertWithNotNilPrimaryKeyThatMatchesARowThrowsDatabaseError", testInsertWithNotNilPrimaryKeyThatMatchesARowThrowsDatabaseError),
        ("testOrderByPrimaryKey", testOrderByPrimaryKey),
        ("testSaveAfterDeleteInsertsARow", testSaveAfterDeleteInsertsARow),
        ("testSaveWithNilPrimaryKeyThrowsDatabaseError", testSaveWithNilPrimaryKeyThrowsDatabaseError),
        ("testSaveWithNotNilPrimaryKeyThatDoesNotMatchAnyRowInsertsARow", testSaveWithNotNilPrimaryKeyThatDoesNotMatchAnyRowInsertsARow),
        ("testSaveWithNotNilPrimaryKeyThatMatchesARowUpdatesThatRow", testSaveWithNotNilPrimaryKeyThatMatchesARowUpdatesThatRow),
        ("testUpdateAfterDeleteThrowsRecordNotFound", testUpdateAfterDeleteThrowsRecordNotFound),
        ("testUpdateWithNotNilPrimaryKeyThatDoesNotMatchAnyRowThrowsRecordNotFound", testUpdateWithNotNilPrimaryKeyThatDoesNotMatchAnyRowThrowsRecordNotFound),
        ("testUpdateWithNotNilPrimaryKeyThatMatchesARowUpdatesThatRow", testUpdateWithNotNilPrimaryKeyThatMatchesARowUpdatesThatRow),
    ]
}

extension RecordPersistenceConflictPolicyTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RecordPersistenceConflictPolicyTests = [
        ("testConfigurablePersistenceConflictPolicy", testConfigurablePersistenceConflictPolicy),
        ("testDefaultPersistenceConflictPolicy", testDefaultPersistenceConflictPolicy),
    ]
}

extension RecordPrimaryKeyHiddenRowIDTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RecordPrimaryKeyHiddenRowIDTests = [
        ("testDeleteAfterDeleteDoesNothing", testDeleteAfterDeleteDoesNothing),
        ("testDeleteWithNilPrimaryKey", testDeleteWithNilPrimaryKey),
        ("testDeleteWithNotNilPrimaryKeyThatDoesNotMatchAnyRowDoesNothing", testDeleteWithNotNilPrimaryKeyThatDoesNotMatchAnyRowDoesNothing),
        ("testDeleteWithNotNilPrimaryKeyThatMatchesARowDeletesThatRow", testDeleteWithNotNilPrimaryKeyThatMatchesARowDeletesThatRow),
        ("testExistsAfterDeleteReturnsTrue", testExistsAfterDeleteReturnsTrue),
        ("testExistsWithNilPrimaryKeyReturnsFalse", testExistsWithNilPrimaryKeyReturnsFalse),
        ("testExistsWithNotNilPrimaryKeyThatDoesNotMatchAnyRowReturnsFalse", testExistsWithNotNilPrimaryKeyThatDoesNotMatchAnyRowReturnsFalse),
        ("testExistsWithNotNilPrimaryKeyThatMatchesARowReturnsTrue", testExistsWithNotNilPrimaryKeyThatMatchesARowReturnsTrue),
        ("testFetchAllWithKeys", testFetchAllWithKeys),
        ("testFetchAllWithKeysRequest", testFetchAllWithKeysRequest),
        ("testFetchAllWithPrimaryKeys", testFetchAllWithPrimaryKeys),
        ("testFetchAllWithPrimaryKeysRequest", testFetchAllWithPrimaryKeysRequest),
        ("testFetchCursorWithKeys", testFetchCursorWithKeys),
        ("testFetchCursorWithKeysRequest", testFetchCursorWithKeysRequest),
        ("testFetchCursorWithPrimaryKeys", testFetchCursorWithPrimaryKeys),
        ("testFetchCursorWithPrimaryKeysRequest", testFetchCursorWithPrimaryKeysRequest),
        ("testFetchedRecordsController", testFetchedRecordsController),
        ("testFetchOneWithKey", testFetchOneWithKey),
        ("testFetchOneWithKeyRequest", testFetchOneWithKeyRequest),
        ("testFetchOneWithPrimaryKey", testFetchOneWithPrimaryKey),
        ("testFetchOneWithPrimaryKeyRequest", testFetchOneWithPrimaryKeyRequest),
        ("testInsertAfterDeleteInsertsARow", testInsertAfterDeleteInsertsARow),
        ("testInsertWithNilPrimaryKeyInsertsARowAndSetsPrimaryKey", testInsertWithNilPrimaryKeyInsertsARowAndSetsPrimaryKey),
        ("testInsertWithNotNilPrimaryKeyThatDoesNotMatchAnyRowInsertsARow", testInsertWithNotNilPrimaryKeyThatDoesNotMatchAnyRowInsertsARow),
        ("testInsertWithNotNilPrimaryKeyThatMatchesARowThrowsDatabaseError", testInsertWithNotNilPrimaryKeyThatMatchesARowThrowsDatabaseError),
        ("testOrderByPrimaryKey", testOrderByPrimaryKey),
        ("testRollbackedInsertWithNilPrimaryKeyDoesNotResetPrimaryKey", testRollbackedInsertWithNilPrimaryKeyDoesNotResetPrimaryKey),
        ("testRollbackedInsertWithNotNilPrimaryKeyDoeNotResetPrimaryKey", testRollbackedInsertWithNotNilPrimaryKeyDoeNotResetPrimaryKey),
        ("testRowIdIsSelectedByDefault", testRowIdIsSelectedByDefault),
        ("testSaveAfterDeleteInsertsARow", testSaveAfterDeleteInsertsARow),
        ("testSaveWithNilPrimaryKeyInsertsARowAndSetsPrimaryKey", testSaveWithNilPrimaryKeyInsertsARowAndSetsPrimaryKey),
        ("testSaveWithNotNilPrimaryKeyThatDoesNotMatchAnyRowInsertsARow", testSaveWithNotNilPrimaryKeyThatDoesNotMatchAnyRowInsertsARow),
        ("testSaveWithNotNilPrimaryKeyThatMatchesARowUpdatesThatRow", testSaveWithNotNilPrimaryKeyThatMatchesARowUpdatesThatRow),
        ("testUpdateAfterDeleteThrowsRecordNotFound", testUpdateAfterDeleteThrowsRecordNotFound),
        ("testUpdateWithNilPrimaryKeyThrowsRecordNotFound", testUpdateWithNilPrimaryKeyThrowsRecordNotFound),
        ("testUpdateWithNotNilPrimaryKeyThatDoesNotMatchAnyRowThrowsRecordNotFound", testUpdateWithNotNilPrimaryKeyThatDoesNotMatchAnyRowThrowsRecordNotFound),
        ("testUpdateWithNotNilPrimaryKeyThatMatchesARowUpdatesThatRow", testUpdateWithNotNilPrimaryKeyThatMatchesARowUpdatesThatRow),
    ]
}

extension RecordPrimaryKeyMultipleTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RecordPrimaryKeyMultipleTests = [
        ("testDeleteAfterDeleteDoesNothing", testDeleteAfterDeleteDoesNothing),
        ("testDeleteWithNilPrimaryKey", testDeleteWithNilPrimaryKey),
        ("testDeleteWithNotNilPrimaryKeyThatDoesNotMatchAnyRowDoesNothing", testDeleteWithNotNilPrimaryKeyThatDoesNotMatchAnyRowDoesNothing),
        ("testDeleteWithNotNilPrimaryKeyThatMatchesARowDeletesThatRow", testDeleteWithNotNilPrimaryKeyThatMatchesARowDeletesThatRow),
        ("testExistsAfterDeleteReturnsTrue", testExistsAfterDeleteReturnsTrue),
        ("testExistsWithNilPrimaryKeyReturnsFalse", testExistsWithNilPrimaryKeyReturnsFalse),
        ("testExistsWithNotNilPrimaryKeyThatDoesNotMatchAnyRowReturnsFalse", testExistsWithNotNilPrimaryKeyThatDoesNotMatchAnyRowReturnsFalse),
        ("testExistsWithNotNilPrimaryKeyThatMatchesARowReturnsTrue", testExistsWithNotNilPrimaryKeyThatMatchesARowReturnsTrue),
        ("testFetchAllWithKeys", testFetchAllWithKeys),
        ("testFetchAllWithKeysRequest", testFetchAllWithKeysRequest),
        ("testFetchCursorWithKeys", testFetchCursorWithKeys),
        ("testFetchCursorWithKeysRequest", testFetchCursorWithKeysRequest),
        ("testFetchOneWithKey", testFetchOneWithKey),
        ("testFetchOneWithKeyRequest", testFetchOneWithKeyRequest),
        ("testInsertAfterDeleteInsertsARow", testInsertAfterDeleteInsertsARow),
        ("testInsertWithNilPrimaryKeyThrowsDatabaseError", testInsertWithNilPrimaryKeyThrowsDatabaseError),
        ("testInsertWithNotNilPrimaryKeyThatDoesNotMatchAnyRowInsertsARow", testInsertWithNotNilPrimaryKeyThatDoesNotMatchAnyRowInsertsARow),
        ("testInsertWithNotNilPrimaryKeyThatMatchesARowThrowsDatabaseError", testInsertWithNotNilPrimaryKeyThatMatchesARowThrowsDatabaseError),
        ("testOrderByPrimaryKey", testOrderByPrimaryKey),
        ("testSaveAfterDeleteInsertsARow", testSaveAfterDeleteInsertsARow),
        ("testSaveWithNilPrimaryKeyThrowsDatabaseError", testSaveWithNilPrimaryKeyThrowsDatabaseError),
        ("testSaveWithNotNilPrimaryKeyThatDoesNotMatchAnyRowInsertsARow", testSaveWithNotNilPrimaryKeyThatDoesNotMatchAnyRowInsertsARow),
        ("testSaveWithNotNilPrimaryKeyThatMatchesARowUpdatesThatRow", testSaveWithNotNilPrimaryKeyThatMatchesARowUpdatesThatRow),
        ("testUpdateAfterDeleteThrowsRecordNotFound", testUpdateAfterDeleteThrowsRecordNotFound),
        ("testUpdateWithNilPrimaryKeyThrowsRecordNotFound", testUpdateWithNilPrimaryKeyThrowsRecordNotFound),
        ("testUpdateWithNotNilPrimaryKeyThatDoesNotMatchAnyRowThrowsRecordNotFound", testUpdateWithNotNilPrimaryKeyThatDoesNotMatchAnyRowThrowsRecordNotFound),
        ("testUpdateWithNotNilPrimaryKeyThatMatchesARowUpdatesThatRow", testUpdateWithNotNilPrimaryKeyThatMatchesARowUpdatesThatRow),
    ]
}

extension RecordPrimaryKeyNoneTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RecordPrimaryKeyNoneTests = [
        ("testFetchAllWithPrimaryKeys", testFetchAllWithPrimaryKeys),
        ("testFetchAllWithPrimaryKeysRequest", testFetchAllWithPrimaryKeysRequest),
        ("testFetchCursorWithPrimaryKeys", testFetchCursorWithPrimaryKeys),
        ("testFetchCursorWithPrimaryKeysRequest", testFetchCursorWithPrimaryKeysRequest),
        ("testFetchOneWithKey", testFetchOneWithKey),
        ("testFetchOneWithKeyRequest", testFetchOneWithKeyRequest),
        ("testFetchOneWithPrimaryKey", testFetchOneWithPrimaryKey),
        ("testFetchOneWithPrimaryKeyRequest", testFetchOneWithPrimaryKeyRequest),
        ("testInsertInsertsARow", testInsertInsertsARow),
        ("testOrderByPrimaryKey", testOrderByPrimaryKey),
        ("testSaveInsertsARow", testSaveInsertsARow),
    ]
}

extension RecordPrimaryKeyRowIDTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RecordPrimaryKeyRowIDTests = [
        ("testDeleteAfterDeleteDoesNothing", testDeleteAfterDeleteDoesNothing),
        ("testDeleteWithNilPrimaryKey", testDeleteWithNilPrimaryKey),
        ("testDeleteWithNotNilPrimaryKeyThatDoesNotMatchAnyRowDoesNothing", testDeleteWithNotNilPrimaryKeyThatDoesNotMatchAnyRowDoesNothing),
        ("testDeleteWithNotNilPrimaryKeyThatMatchesARowDeletesThatRow", testDeleteWithNotNilPrimaryKeyThatMatchesARowDeletesThatRow),
        ("testExistsAfterDeleteReturnsTrue", testExistsAfterDeleteReturnsTrue),
        ("testExistsWithNilPrimaryKeyReturnsFalse", testExistsWithNilPrimaryKeyReturnsFalse),
        ("testExistsWithNotNilPrimaryKeyThatDoesNotMatchAnyRowReturnsFalse", testExistsWithNotNilPrimaryKeyThatDoesNotMatchAnyRowReturnsFalse),
        ("testExistsWithNotNilPrimaryKeyThatMatchesARowReturnsTrue", testExistsWithNotNilPrimaryKeyThatMatchesARowReturnsTrue),
        ("testFetchAllWithKeys", testFetchAllWithKeys),
        ("testFetchAllWithKeysRequest", testFetchAllWithKeysRequest),
        ("testFetchAllWithPrimaryKeys", testFetchAllWithPrimaryKeys),
        ("testFetchAllWithPrimaryKeysRequest", testFetchAllWithPrimaryKeysRequest),
        ("testFetchCursorWithKeys", testFetchCursorWithKeys),
        ("testFetchCursorWithKeysRequest", testFetchCursorWithKeysRequest),
        ("testFetchCursorWithPrimaryKeys", testFetchCursorWithPrimaryKeys),
        ("testFetchCursorWithPrimaryKeysRequest", testFetchCursorWithPrimaryKeysRequest),
        ("testFetchOneWithKey", testFetchOneWithKey),
        ("testFetchOneWithKeyRequest", testFetchOneWithKeyRequest),
        ("testFetchOneWithPrimaryKey", testFetchOneWithPrimaryKey),
        ("testFetchOneWithPrimaryKeyRequest", testFetchOneWithPrimaryKeyRequest),
        ("testInsertAfterDeleteInsertsARow", testInsertAfterDeleteInsertsARow),
        ("testInsertWithNilPrimaryKeyInsertsARowAndSetsPrimaryKey", testInsertWithNilPrimaryKeyInsertsARowAndSetsPrimaryKey),
        ("testInsertWithNotNilPrimaryKeyThatDoesNotMatchAnyRowInsertsARow", testInsertWithNotNilPrimaryKeyThatDoesNotMatchAnyRowInsertsARow),
        ("testInsertWithNotNilPrimaryKeyThatMatchesARowThrowsDatabaseError", testInsertWithNotNilPrimaryKeyThatMatchesARowThrowsDatabaseError),
        ("testOrderByPrimaryKey", testOrderByPrimaryKey),
        ("testRollbackedInsertWithNilPrimaryKeyDoesNotResetPrimaryKey", testRollbackedInsertWithNilPrimaryKeyDoesNotResetPrimaryKey),
        ("testRollbackedInsertWithNotNilPrimaryKeyDoeNotResetPrimaryKey", testRollbackedInsertWithNotNilPrimaryKeyDoeNotResetPrimaryKey),
        ("testSaveAfterDeleteInsertsARow", testSaveAfterDeleteInsertsARow),
        ("testSaveWithNilPrimaryKeyInsertsARowAndSetsPrimaryKey", testSaveWithNilPrimaryKeyInsertsARowAndSetsPrimaryKey),
        ("testSaveWithNotNilPrimaryKeyThatDoesNotMatchAnyRowInsertsARow", testSaveWithNotNilPrimaryKeyThatDoesNotMatchAnyRowInsertsARow),
        ("testSaveWithNotNilPrimaryKeyThatMatchesARowUpdatesThatRow", testSaveWithNotNilPrimaryKeyThatMatchesARowUpdatesThatRow),
        ("testUpdateAfterDeleteThrowsRecordNotFound", testUpdateAfterDeleteThrowsRecordNotFound),
        ("testUpdateWithNilPrimaryKeyThrowsRecordNotFound", testUpdateWithNilPrimaryKeyThrowsRecordNotFound),
        ("testUpdateWithNotNilPrimaryKeyThatDoesNotMatchAnyRowThrowsRecordNotFound", testUpdateWithNotNilPrimaryKeyThatDoesNotMatchAnyRowThrowsRecordNotFound),
        ("testUpdateWithNotNilPrimaryKeyThatMatchesARowUpdatesThatRow", testUpdateWithNotNilPrimaryKeyThatMatchesARowUpdatesThatRow),
    ]
}

extension RecordPrimaryKeySingleTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RecordPrimaryKeySingleTests = [
        ("testDeleteAfterDeleteDoesNothing", testDeleteAfterDeleteDoesNothing),
        ("testDeleteWithNilPrimaryKey", testDeleteWithNilPrimaryKey),
        ("testDeleteWithNotNilPrimaryKeyThatDoesNotMatchAnyRowDoesNothing", testDeleteWithNotNilPrimaryKeyThatDoesNotMatchAnyRowDoesNothing),
        ("testDeleteWithNotNilPrimaryKeyThatMatchesARowDeletesThatRow", testDeleteWithNotNilPrimaryKeyThatMatchesARowDeletesThatRow),
        ("testExistsAfterDeleteReturnsTrue", testExistsAfterDeleteReturnsTrue),
        ("testExistsWithNilPrimaryKeyReturnsFalse", testExistsWithNilPrimaryKeyReturnsFalse),
        ("testExistsWithNotNilPrimaryKeyThatDoesNotMatchAnyRowReturnsFalse", testExistsWithNotNilPrimaryKeyThatDoesNotMatchAnyRowReturnsFalse),
        ("testExistsWithNotNilPrimaryKeyThatMatchesARowReturnsTrue", testExistsWithNotNilPrimaryKeyThatMatchesARowReturnsTrue),
        ("testFetchAllWithKeys", testFetchAllWithKeys),
        ("testFetchAllWithKeysRequest", testFetchAllWithKeysRequest),
        ("testFetchAllWithPrimaryKeys", testFetchAllWithPrimaryKeys),
        ("testFetchAllWithPrimaryKeysRequest", testFetchAllWithPrimaryKeysRequest),
        ("testFetchCursorWithKeys", testFetchCursorWithKeys),
        ("testFetchCursorWithKeysRequest", testFetchCursorWithKeysRequest),
        ("testFetchCursorWithPrimaryKeys", testFetchCursorWithPrimaryKeys),
        ("testFetchCursorWithPrimaryKeysRequest", testFetchCursorWithPrimaryKeysRequest),
        ("testFetchOneWithKey", testFetchOneWithKey),
        ("testFetchOneWithKeyRequest", testFetchOneWithKeyRequest),
        ("testFetchOneWithPrimaryKey", testFetchOneWithPrimaryKey),
        ("testFetchOneWithPrimaryKeyRequest", testFetchOneWithPrimaryKeyRequest),
        ("testInsertAfterDeleteInsertsARow", testInsertAfterDeleteInsertsARow),
        ("testInsertWithNilPrimaryKeyThrowsDatabaseError", testInsertWithNilPrimaryKeyThrowsDatabaseError),
        ("testInsertWithNotNilPrimaryKeyThatDoesNotMatchAnyRowInsertsARow", testInsertWithNotNilPrimaryKeyThatDoesNotMatchAnyRowInsertsARow),
        ("testInsertWithNotNilPrimaryKeyThatMatchesARowThrowsDatabaseError", testInsertWithNotNilPrimaryKeyThatMatchesARowThrowsDatabaseError),
        ("testOrderByPrimaryKey", testOrderByPrimaryKey),
        ("testSaveAfterDeleteInsertsARow", testSaveAfterDeleteInsertsARow),
        ("testSaveWithNilPrimaryKeyThrowsDatabaseError", testSaveWithNilPrimaryKeyThrowsDatabaseError),
        ("testSaveWithNotNilPrimaryKeyThatDoesNotMatchAnyRowInsertsARow", testSaveWithNotNilPrimaryKeyThatDoesNotMatchAnyRowInsertsARow),
        ("testSaveWithNotNilPrimaryKeyThatMatchesARowUpdatesThatRow", testSaveWithNotNilPrimaryKeyThatMatchesARowUpdatesThatRow),
        ("testUpdateAfterDeleteThrowsRecordNotFound", testUpdateAfterDeleteThrowsRecordNotFound),
        ("testUpdateWithNilPrimaryKeyThrowsRecordNotFound", testUpdateWithNilPrimaryKeyThrowsRecordNotFound),
        ("testUpdateWithNotNilPrimaryKeyThatDoesNotMatchAnyRowThrowsRecordNotFound", testUpdateWithNotNilPrimaryKeyThatDoesNotMatchAnyRowThrowsRecordNotFound),
        ("testUpdateWithNotNilPrimaryKeyThatMatchesARowUpdatesThatRow", testUpdateWithNotNilPrimaryKeyThatMatchesARowUpdatesThatRow),
    ]
}

extension RecordPrimaryKeySingleWithReplaceConflictResolutionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RecordPrimaryKeySingleWithReplaceConflictResolutionTests = [
        ("testDeleteAfterDeleteDoesNothing", testDeleteAfterDeleteDoesNothing),
        ("testDeleteWithNotNilPrimaryKeyThatDoesNotMatchAnyRowDoesNothing", testDeleteWithNotNilPrimaryKeyThatDoesNotMatchAnyRowDoesNothing),
        ("testDeleteWithNotNilPrimaryKeyThatMatchesARowDeletesThatRow", testDeleteWithNotNilPrimaryKeyThatMatchesARowDeletesThatRow),
        ("testExistsAfterDeleteReturnsTrue", testExistsAfterDeleteReturnsTrue),
        ("testExistsWithNotNilPrimaryKeyThatDoesNotMatchAnyRowReturnsFalse", testExistsWithNotNilPrimaryKeyThatDoesNotMatchAnyRowReturnsFalse),
        ("testExistsWithNotNilPrimaryKeyThatMatchesARowReturnsTrue", testExistsWithNotNilPrimaryKeyThatMatchesARowReturnsTrue),
        ("testFetchAllWithKeys", testFetchAllWithKeys),
        ("testFetchAllWithKeysRequest", testFetchAllWithKeysRequest),
        ("testFetchAllWithPrimaryKeys", testFetchAllWithPrimaryKeys),
        ("testFetchAllWithPrimaryKeysRequest", testFetchAllWithPrimaryKeysRequest),
        ("testFetchCursorWithKeys", testFetchCursorWithKeys),
        ("testFetchCursorWithKeysRequest", testFetchCursorWithKeysRequest),
        ("testFetchCursorWithPrimaryKeys", testFetchCursorWithPrimaryKeys),
        ("testFetchCursorWithPrimaryKeysRequest", testFetchCursorWithPrimaryKeysRequest),
        ("testFetchOneWithKey", testFetchOneWithKey),
        ("testFetchOneWithKeyRequest", testFetchOneWithKeyRequest),
        ("testFetchOneWithPrimaryKey", testFetchOneWithPrimaryKey),
        ("testFetchOneWithPrimaryKeyRequest", testFetchOneWithPrimaryKeyRequest),
        ("testInsertAfterDeleteInsertsARow", testInsertAfterDeleteInsertsARow),
        ("testInsertWithNilPrimaryKeyThrowsDatabaseError", testInsertWithNilPrimaryKeyThrowsDatabaseError),
        ("testInsertWithNotNilPrimaryKeyThatDoesNotMatchAnyRowInsertsARow", testInsertWithNotNilPrimaryKeyThatDoesNotMatchAnyRowInsertsARow),
        ("testInsertWithNotNilPrimaryKeyThatMatchesARowReplacesARow", testInsertWithNotNilPrimaryKeyThatMatchesARowReplacesARow),
        ("testOrderByPrimaryKey", testOrderByPrimaryKey),
        ("testSaveAfterDeleteInsertsARow", testSaveAfterDeleteInsertsARow),
        ("testSaveWithNilPrimaryKeyThrowsDatabaseError", testSaveWithNilPrimaryKeyThrowsDatabaseError),
        ("testSaveWithNotNilPrimaryKeyThatDoesNotMatchAnyRowInsertsARow", testSaveWithNotNilPrimaryKeyThatDoesNotMatchAnyRowInsertsARow),
        ("testSaveWithNotNilPrimaryKeyThatMatchesARowUpdatesThatRow", testSaveWithNotNilPrimaryKeyThatMatchesARowUpdatesThatRow),
        ("testUpdateAfterDeleteThrowsRecordNotFound", testUpdateAfterDeleteThrowsRecordNotFound),
        ("testUpdateWithNotNilPrimaryKeyThatDoesNotMatchAnyRowThrowsRecordNotFound", testUpdateWithNotNilPrimaryKeyThatDoesNotMatchAnyRowThrowsRecordNotFound),
        ("testUpdateWithNotNilPrimaryKeyThatMatchesARowUpdatesThatRow", testUpdateWithNotNilPrimaryKeyThatMatchesARowUpdatesThatRow),
    ]
}

extension RecordQueryInterfaceRequestTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RecordQueryInterfaceRequestTests = [
        ("testFetch", testFetch),
    ]
}

extension RecordSubClassTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RecordSubClassTests = [
        ("testSaveAfterDeleteCallsInsertMethod", testSaveAfterDeleteCallsInsertMethod),
        ("testSaveWithNilPrimaryKeyCallsInsertMethod", testSaveWithNilPrimaryKeyCallsInsertMethod),
        ("testSaveWithNotNilPrimaryKeyThatDoesNotMatchAnyRowCallsInsertMethod", testSaveWithNotNilPrimaryKeyThatDoesNotMatchAnyRowCallsInsertMethod),
        ("testSaveWithNotNilPrimaryKeyThatMatchesARowCallsUpdateMethod", testSaveWithNotNilPrimaryKeyThatMatchesARowCallsUpdateMethod),
        ("testSelect", testSelect),
    ]
}

extension RecordUniqueIndexTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RecordUniqueIndexTests = [
        ("testKeyFilterAcceptsUniqueIndex", testKeyFilterAcceptsUniqueIndex),
    ]
}

extension RecordWithColumnNameManglingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RecordWithColumnNameManglingTests = [
        ("testBadlyMangledStuff", testBadlyMangledStuff),
    ]
}

extension ResultCodeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ResultCodeTests = [
        ("testCatchResultCode", testCatchResultCode),
        ("testResultCodeEquatable", testResultCodeEquatable),
        ("testResultCodeMatch", testResultCodeMatch),
        ("testResultCodeSwitch", testResultCodeSwitch),
    ]
}

extension RowCopiedFromStatementTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RowCopiedFromStatementTests = [
        ("testCopy", testCopy),
        ("testDataNoCopy", testDataNoCopy),
        ("testDescription", testDescription),
        ("testEqualityWithCopy", testEqualityWithCopy),
        ("testMissingColumn", testMissingColumn),
        ("testRowAsSequence", testRowAsSequence),
        ("testRowColumnNames", testRowColumnNames),
        ("testRowCount", testRowCount),
        ("testRowDatabaseValueAtIndex", testRowDatabaseValueAtIndex),
        ("testRowDatabaseValueNamed", testRowDatabaseValueNamed),
        ("testRowDatabaseValues", testRowDatabaseValues),
        ("testRowHasColumnIsCaseInsensitive", testRowHasColumnIsCaseInsensitive),
        ("testRowIsCaseInsensitive", testRowIsCaseInsensitive),
        ("testRowIsCaseInsensitiveAndReturnsLeftmostMatchingColumn", testRowIsCaseInsensitiveAndReturnsLeftmostMatchingColumn),
        ("testRowValueAtIndex", testRowValueAtIndex),
        ("testRowValueFromColumn", testRowValueFromColumn),
        ("testRowValueNamed", testRowValueNamed),
        ("testScopes", testScopes),
    ]
}

extension RowFetchTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RowFetchTests = [
        ("testFetchAll", testFetchAll),
        ("testFetchAllCompilationFailure", testFetchAllCompilationFailure),
        ("testFetchAllStepFailure", testFetchAllStepFailure),
        ("testFetchAllWithInterpolation", testFetchAllWithInterpolation),
        ("testFetchCursor", testFetchCursor),
        ("testFetchCursorCompilationFailure", testFetchCursorCompilationFailure),
        ("testFetchCursorStepFailure", testFetchCursorStepFailure),
        ("testFetchCursorWithInterpolation", testFetchCursorWithInterpolation),
        ("testFetchOne", testFetchOne),
        ("testFetchOneCompilationFailure", testFetchOneCompilationFailure),
        ("testFetchOneStepFailure", testFetchOneStepFailure),
        ("testFetchOneWithInterpolation", testFetchOneWithInterpolation),
    ]
}

extension RowFoundationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RowFoundationTests = [
        ("testRowFromDictionary", testRowFromDictionary),
        ("testRowFromInvalidDictionary", testRowFromInvalidDictionary),
    ]
}

extension RowFromDictionaryLiteralTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RowFromDictionaryLiteralTests = [
        ("testColumnOrderIsPreserved", testColumnOrderIsPreserved),
        ("testCopy", testCopy),
        ("testDataNoCopy", testDataNoCopy),
        ("testDescription", testDescription),
        ("testDuplicateColumnNames", testDuplicateColumnNames),
        ("testEqualityWithCopy", testEqualityWithCopy),
        ("testMissingColumn", testMissingColumn),
        ("testRowAsSequence", testRowAsSequence),
        ("testRowColumnNames", testRowColumnNames),
        ("testRowCount", testRowCount),
        ("testRowDatabaseValueAtIndex", testRowDatabaseValueAtIndex),
        ("testRowDatabaseValueNamed", testRowDatabaseValueNamed),
        ("testRowDatabaseValues", testRowDatabaseValues),
        ("testRowHasColumnIsCaseInsensitive", testRowHasColumnIsCaseInsensitive),
        ("testRowIsCaseInsensitive", testRowIsCaseInsensitive),
        ("testRowValueAtIndex", testRowValueAtIndex),
        ("testRowValueFromColumn", testRowValueFromColumn),
        ("testRowValueNamed", testRowValueNamed),
        ("testScopes", testScopes),
    ]
}

extension RowFromDictionaryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RowFromDictionaryTests = [
        ("testCopy", testCopy),
        ("testDataNoCopy", testDataNoCopy),
        ("testDescription", testDescription),
        ("testEqualityWithCopy", testEqualityWithCopy),
        ("testMissingColumn", testMissingColumn),
        ("testRowAsSequence", testRowAsSequence),
        ("testRowColumnNames", testRowColumnNames),
        ("testRowCount", testRowCount),
        ("testRowDatabaseValueAtIndex", testRowDatabaseValueAtIndex),
        ("testRowDatabaseValueNamed", testRowDatabaseValueNamed),
        ("testRowDatabaseValues", testRowDatabaseValues),
        ("testRowHasColumnIsCaseInsensitive", testRowHasColumnIsCaseInsensitive),
        ("testRowIsCaseInsensitive", testRowIsCaseInsensitive),
        ("testRowValueAtIndex", testRowValueAtIndex),
        ("testRowValueFromColumn", testRowValueFromColumn),
        ("testRowValueNamed", testRowValueNamed),
        ("testScopes", testScopes),
    ]
}

extension RowFromStatementTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RowFromStatementTests = [
        ("testCopy", testCopy),
        ("testDatabaseCursorMap", testDatabaseCursorMap),
        ("testDataNoCopy", testDataNoCopy),
        ("testDescription", testDescription),
        ("testEqualityWithCopy", testEqualityWithCopy),
        ("testMissingColumn", testMissingColumn),
        ("testRowAsSequence", testRowAsSequence),
        ("testRowColumnNames", testRowColumnNames),
        ("testRowCount", testRowCount),
        ("testRowDatabaseValueAtIndex", testRowDatabaseValueAtIndex),
        ("testRowDatabaseValueNamed", testRowDatabaseValueNamed),
        ("testRowDatabaseValues", testRowDatabaseValues),
        ("testRowHasColumnIsCaseInsensitive", testRowHasColumnIsCaseInsensitive),
        ("testRowIsCaseInsensitive", testRowIsCaseInsensitive),
        ("testRowIsCaseInsensitiveAndReturnsLeftmostMatchingColumn", testRowIsCaseInsensitiveAndReturnsLeftmostMatchingColumn),
        ("testRowValueAtIndex", testRowValueAtIndex),
        ("testRowValueFromColumn", testRowValueFromColumn),
        ("testRowValueNamed", testRowValueNamed),
        ("testScopes", testScopes),
    ]
}

extension SQLExpressionLiteralTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SQLExpressionLiteralTests = [
        ("testWithArguments", testWithArguments),
        ("testWithoutArguments", testWithoutArguments),
    ]
}

extension SQLLiteralTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SQLLiteralTests = [
        ("testAliasedExpressionInterpolation", testAliasedExpressionInterpolation),
        ("testAppendLiteral", testAppendLiteral),
        ("testAppendLiteralWithInterpolation", testAppendLiteralWithInterpolation),
        ("testAppendRawSQL", testAppendRawSQL),
        ("testAppendRawSQLWithInterpolation", testAppendRawSQLWithInterpolation),
        ("testCodingKeyColumnInterpolation", testCodingKeyColumnInterpolation),
        ("testCodingKeyInterpolation", testCodingKeyInterpolation),
        ("testCollectionJoined", testCollectionJoined),
        ("testDatabaseValueConvertibleInterpolation", testDatabaseValueConvertibleInterpolation),
        ("testDataInterpolation", testDataInterpolation),
        ("testExpressibleInterpolation", testExpressibleInterpolation),
        ("testExpressibleSequenceInterpolation", testExpressibleSequenceInterpolation),
        ("testJoinedQueryInterfaceRequestInterpolation", testJoinedQueryInterfaceRequestInterpolation),
        ("testLiteralInitializer", testLiteralInitializer),
        ("testOrderingTermInterpolation", testOrderingTermInterpolation),
        ("testPlusEqualOperator", testPlusEqualOperator),
        ("testPlusEqualOperatorWithInterpolation", testPlusEqualOperatorWithInterpolation),
        ("testPlusOperator", testPlusOperator),
        ("testPlusOperatorWithInterpolation", testPlusOperatorWithInterpolation),
        ("testQualifiedSQLInterpolation", testQualifiedSQLInterpolation),
        ("testQualifiedSQLLiteral", testQualifiedSQLLiteral),
        ("testQueryInterfaceRequestInterpolation", testQueryInterfaceRequestInterpolation),
        ("testRawSQLInterpolation", testRawSQLInterpolation),
        ("testSelectableInterpolation", testSelectableInterpolation),
        ("testSequenceJoined", testSequenceJoined),
        ("testSQLInitializer", testSQLInitializer),
        ("testSQLLiteralInterpolation", testSQLLiteralInterpolation),
        ("testSQLRequestInterpolation", testSQLRequestInterpolation),
        ("testTableInterpolation", testTableInterpolation),
        ("testTableSelectionInterpolation", testTableSelectionInterpolation),
    ]
}

extension SQLRequestTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SQLRequestTests = [
        ("testCachedSQLRequest", testCachedSQLRequest),
        ("testLiteralInitializer", testLiteralInitializer),
        ("testNotCachedSQLRequest", testNotCachedSQLRequest),
        ("testSQLInterpolation", testSQLInterpolation),
        ("testSQLLiteralInitializer", testSQLLiteralInitializer),
        ("testSQLLiteralInitializerWithInterpolation", testSQLLiteralInitializerWithInterpolation),
        ("testSQLRequest", testSQLRequest),
        ("testSQLRequestWithArgumentsAndAdapter", testSQLRequestWithArgumentsAndAdapter),
    ]
}

extension SchedulingWatchdogTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SchedulingWatchdogTests = [
        ("testDatabasePoolFromDatabasePool", testDatabasePoolFromDatabasePool),
        ("testDatabasePoolFromDatabaseQueue", testDatabasePoolFromDatabaseQueue),
        ("testDatabaseQueueFromDatabasePool", testDatabaseQueueFromDatabasePool),
        ("testDatabaseQueueFromDatabaseQueue", testDatabaseQueueFromDatabaseQueue),
        ("testSchedulingWatchdog", testSchedulingWatchdog),
    ]
}

extension SelectStatementTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SelectStatementTests = [
        ("testArrayStatementArguments", testArrayStatementArguments),
        ("testCachedSelectStatementStepFailure", testCachedSelectStatementStepFailure),
        ("testDatabaseErrorThrownBySelectStatementContainSQL", testDatabaseErrorThrownBySelectStatementContainSQL),
        ("testDictionaryStatementArguments", testDictionaryStatementArguments),
        ("testRegion", testRegion),
        ("testStatementArgumentsSetterWithArray", testStatementArgumentsSetterWithArray),
        ("testStatementArgumentsSetterWithDictionary", testStatementArgumentsSetterWithDictionary),
        ("testStatementCursor", testStatementCursor),
        ("testStatementCursorStepFailure", testStatementCursorStepFailure),
    ]
}

extension StatementArgumentsFoundationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StatementArgumentsFoundationTests = [
        ("testStatementArgumentsArrayInitializer", testStatementArgumentsArrayInitializer),
        ("testStatementArgumentsDictionaryInitializer", testStatementArgumentsDictionaryInitializer),
        ("testStatementArgumentsNSArrayInitializerFromInvalidNSArray", testStatementArgumentsNSArrayInitializerFromInvalidNSArray),
        ("testStatementArgumentsNSDictionaryInitializerFromInvalidNSDictionary", testStatementArgumentsNSDictionaryInitializerFromInvalidNSDictionary),
    ]
}

extension StatementArgumentsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StatementArgumentsTests = [
        ("testAppendContentsOf", testAppendContentsOf),
        ("testCheckedNamedStatementArguments", testCheckedNamedStatementArguments),
        ("testCheckedPositionalStatementArguments", testCheckedPositionalStatementArguments),
        ("testCheckedReusedNamedStatementArguments", testCheckedReusedNamedStatementArguments),
        ("testMixedArguments", testMixedArguments),
        ("testNamedStatementArguments", testNamedStatementArguments),
        ("testNamedStatementArgumentsValidation", testNamedStatementArgumentsValidation),
        ("testOverflowPlusOperator", testOverflowPlusOperator),
        ("testPlusEqualOperator", testPlusEqualOperator),
        ("testPlusOperator", testPlusOperator),
        ("testPositionalStatementArguments", testPositionalStatementArguments),
        ("testPositionalStatementArgumentsValidation", testPositionalStatementArgumentsValidation),
        ("testReusedNamedStatementArguments", testReusedNamedStatementArguments),
        ("testReusedNamedStatementArgumentsValidation", testReusedNamedStatementArgumentsValidation),
        ("testUncheckedNamedStatementArguments", testUncheckedNamedStatementArguments),
        ("testUncheckedPositionalStatementArguments", testUncheckedPositionalStatementArguments),
        ("testUncheckedReusedNamedStatementArguments", testUncheckedReusedNamedStatementArguments),
    ]
}

extension StatementColumnConvertibleFetchTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StatementColumnConvertibleFetchTests = [
        ("testFetchAll", testFetchAll),
        ("testFetchAllCompilationFailure", testFetchAllCompilationFailure),
        ("testFetchAllStepFailure", testFetchAllStepFailure),
        ("testFetchAllWithInterpolation", testFetchAllWithInterpolation),
        ("testFetchCursor", testFetchCursor),
        ("testFetchCursorCompilationFailure", testFetchCursorCompilationFailure),
        ("testFetchCursorStepFailure", testFetchCursorStepFailure),
        ("testFetchCursorWithInterpolation", testFetchCursorWithInterpolation),
        ("testFetchOne", testFetchOne),
        ("testFetchOneCompilationFailure", testFetchOneCompilationFailure),
        ("testFetchOneStepFailure", testFetchOneStepFailure),
        ("testFetchOneWithInterpolation", testFetchOneWithInterpolation),
        ("testOptionalFetchAll", testOptionalFetchAll),
        ("testOptionalFetchAllCompilationFailure", testOptionalFetchAllCompilationFailure),
        ("testOptionalFetchAllStepFailure", testOptionalFetchAllStepFailure),
        ("testOptionalFetchAllWithInterpolation", testOptionalFetchAllWithInterpolation),
        ("testOptionalFetchCursor", testOptionalFetchCursor),
        ("testOptionalFetchCursorCompilationFailure", testOptionalFetchCursorCompilationFailure),
        ("testOptionalFetchCursorWithInterpolation", testOptionalFetchCursorWithInterpolation),
        ("testRowExtraction", testRowExtraction),
        ("testSlowConversion", testSlowConversion),
    ]
}

extension TableDefinitionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TableDefinitionTests = [
        ("testAlterTable", testAlterTable),
        ("testAlterTableRenameColumn", testAlterTableRenameColumn),
        ("testAutoIncrementedPrimaryKey", testAutoIncrementedPrimaryKey),
        ("testAutoReferences", testAutoReferences),
        ("testColumnCheck", testColumnCheck),
        ("testColumnCollation", testColumnCollation),
        ("testColumnDefault", testColumnDefault),
        ("testColumnIndexed", testColumnIndexed),
        ("testColumnNotNull", testColumnNotNull),
        ("testColumnPrimaryKeyOptions", testColumnPrimaryKeyOptions),
        ("testColumnReference", testColumnReference),
        ("testColumnUnique", testColumnUnique),
        ("testCreateIndex", testCreateIndex),
        ("testCreatePartialIndex", testCreatePartialIndex),
        ("testCreateTable", testCreateTable),
        ("testDropIndex", testDropIndex),
        ("testDropTable", testDropTable),
        ("testReindex", testReindex),
        ("testRenameTable", testRenameTable),
        ("testTableCheck", testTableCheck),
        ("testTableCreationOptions", testTableCreationOptions),
        ("testTableForeignKey", testTableForeignKey),
        ("testTablePrimaryKey", testTablePrimaryKey),
        ("testTableUniqueKey", testTableUniqueKey),
        ("testUntypedColumn", testUntypedColumn),
    ]
}

extension TableRecordQueryInterfaceRequestTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TableRecordQueryInterfaceRequestTests = [
        ("testFetchCount", testFetchCount),
        ("testFilter", testFilter),
        ("testFilterLiteral", testFilterLiteral),
        ("testFilterLiteralWithNamedArguments", testFilterLiteralWithNamedArguments),
        ("testFilterLiteralWithPositionalArguments", testFilterLiteralWithPositionalArguments),
        ("testLimit", testLimit),
        ("testMultipleFilter", testMultipleFilter),
        ("testMultipleLimit", testMultipleLimit),
        ("testMultipleSelect", testMultipleSelect),
        ("testMultipleSort", testMultipleSort),
        ("testSelect", testSelect),
        ("testSelectLiteral", testSelectLiteral),
        ("testSelectLiteralWithNamedArguments", testSelectLiteralWithNamedArguments),
        ("testSelectLiteralWithPositionalArguments", testSelectLiteralWithPositionalArguments),
        ("testSelectSQLLiteral", testSelectSQLLiteral),
        ("testSort", testSort),
        ("testSortLiteral", testSortLiteral),
        ("testSortLiteralWithNamedArguments", testSortLiteralWithNamedArguments),
        ("testSortLiteralWithPositionalArguments", testSortLiteralWithPositionalArguments),
    ]
}

extension TableRecordTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TableRecordTests = [
        ("testDefaultDatabaseSelection", testDefaultDatabaseSelection),
        ("testDefaultDatabaseTableName", testDefaultDatabaseTableName),
        ("testExtendedDatabaseSelection", testExtendedDatabaseSelection),
        ("testRestrictedDatabaseSelection", testRestrictedDatabaseSelection),
    ]
}

extension TransactionObserverSavepointsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TransactionObserverSavepointsTests = [
        ("testMultipleRollbackOfSavepoint", testMultipleRollbackOfSavepoint),
        ("testReleaseSavepoint", testReleaseSavepoint),
        ("testRollbackNonNestedSavepointInsideTransaction", testRollbackNonNestedSavepointInsideTransaction),
        ("testSavepointAsTransaction", testSavepointAsTransaction),
        ("testSavepointInsideTransaction", testSavepointInsideTransaction),
        ("testSavepointWithIdenticalName", testSavepointWithIdenticalName),
    ]
}

extension TransactionObserverTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TransactionObserverTests = [
        ("testCascadeWithExplicitTransactionCommit", testCascadeWithExplicitTransactionCommit),
        ("testCascadeWithImplicitTransactionCommit", testCascadeWithImplicitTransactionCommit),
        ("testCascadingDeleteEvents", testCascadingDeleteEvents),
        ("testComplexFilteredDatabaseEvents", testComplexFilteredDatabaseEvents),
        ("testDeleteEvent", testDeleteEvent),
        ("testExplicitTransactionCommit", testExplicitTransactionCommit),
        ("testExplicitTransactionRollback", testExplicitTransactionRollback),
        ("testExplicitTransactionRollbackCausedByDatabaseError", testExplicitTransactionRollbackCausedByDatabaseError),
        ("testExplicitTransactionRollbackCausedByDatabaseErrorSuperseedTransactionObserver", testExplicitTransactionRollbackCausedByDatabaseErrorSuperseedTransactionObserver),
        ("testExplicitTransactionRollbackCausedByTransactionObserver", testExplicitTransactionRollbackCausedByTransactionObserver),
        ("testFilterDatabaseEvents", testFilterDatabaseEvents),
        ("testImplicitTransactionCommit", testImplicitTransactionCommit),
        ("testImplicitTransactionRollbackCausedByDatabaseError", testImplicitTransactionRollbackCausedByDatabaseError),
        ("testImplicitTransactionRollbackCausedByDatabaseErrorSuperseedTransactionObserver", testImplicitTransactionRollbackCausedByDatabaseErrorSuperseedTransactionObserver),
        ("testImplicitTransactionRollbackCausedByTransactionObserver", testImplicitTransactionRollbackCausedByTransactionObserver),
        ("testInsertEvent", testInsertEvent),
        ("testInsertEventIsNotifiedToAllObservers", testInsertEventIsNotifiedToAllObservers),
        ("testMinimalRowIDUpdateObservation", testMinimalRowIDUpdateObservation),
        ("testStopObservingDatabaseChangesUntilNextTransaction", testStopObservingDatabaseChangesUntilNextTransaction),
        ("testTransactionCompletions", testTransactionCompletions),
        ("testTransactionObserverAddAndRemove", testTransactionObserverAddAndRemove),
        ("testUpdateEvent", testUpdateEvent),
    ]
}

extension TruncateOptimizationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TruncateOptimizationTests = [
        ("testDropIndex", testDropIndex),
        ("testDropIndexViewWithPreparedStatement", testDropIndexViewWithPreparedStatement),
        ("testDropTable", testDropTable),
        ("testDropTableWithPreparedStatement", testDropTableWithPreparedStatement),
        ("testDropTemporaryIndex", testDropTemporaryIndex),
        ("testDropTemporaryIndexViewWithPreparedStatement", testDropTemporaryIndexViewWithPreparedStatement),
        ("testDropTemporaryTable", testDropTemporaryTable),
        ("testDropTemporaryTableWithPreparedStatement", testDropTemporaryTableWithPreparedStatement),
        ("testDropTemporaryTrigger", testDropTemporaryTrigger),
        ("testDropTemporaryTriggerWithPreparedStatement", testDropTemporaryTriggerWithPreparedStatement),
        ("testDropTemporaryView", testDropTemporaryView),
        ("testDropTemporaryViewWithPreparedStatement", testDropTemporaryViewWithPreparedStatement),
        ("testDropTrigger", testDropTrigger),
        ("testDropTriggerWithPreparedStatement", testDropTriggerWithPreparedStatement),
        ("testDropView", testDropView),
        ("testDropViewWithPreparedStatement", testDropViewWithPreparedStatement),
        ("testDropVirtualTable", testDropVirtualTable),
        ("testDropVirtualTableWithPreparedStatement", testDropVirtualTableWithPreparedStatement),
        ("testExecuteDelete", testExecuteDelete),
        ("testExecuteDeleteWithPreparedStatement", testExecuteDeleteWithPreparedStatement),
        ("testObservedDropIndex", testObservedDropIndex),
        ("testObservedDropIndexViewWithPreparedStatement", testObservedDropIndexViewWithPreparedStatement),
        ("testObservedDropTable", testObservedDropTable),
        ("testObservedDropTableWithPreparedStatement", testObservedDropTableWithPreparedStatement),
        ("testObservedDropTemporaryIndex", testObservedDropTemporaryIndex),
        ("testObservedDropTemporaryIndexViewWithPreparedStatement", testObservedDropTemporaryIndexViewWithPreparedStatement),
        ("testObservedDropTemporaryTable", testObservedDropTemporaryTable),
        ("testObservedDropTemporaryTableWithPreparedStatement", testObservedDropTemporaryTableWithPreparedStatement),
        ("testObservedDropTemporaryTrigger", testObservedDropTemporaryTrigger),
        ("testObservedDropTemporaryTriggerWithPreparedStatement", testObservedDropTemporaryTriggerWithPreparedStatement),
        ("testObservedDropTemporaryView", testObservedDropTemporaryView),
        ("testObservedDropTemporaryViewWithPreparedStatement", testObservedDropTemporaryViewWithPreparedStatement),
        ("testObservedDropTrigger", testObservedDropTrigger),
        ("testObservedDropTriggerWithPreparedStatement", testObservedDropTriggerWithPreparedStatement),
        ("testObservedDropView", testObservedDropView),
        ("testObservedDropViewWithPreparedStatement", testObservedDropViewWithPreparedStatement),
        ("testObservedDropVirtualTable", testObservedDropVirtualTable),
        ("testObservedDropVirtualTableWithPreparedStatement", testObservedDropVirtualTableWithPreparedStatement),
    ]
}

extension UpdateStatementTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__UpdateStatementTests = [
        ("testArrayStatementArguments", testArrayStatementArguments),
        ("testDatabaseErrorThrownByUpdateStatementContainSQL", testDatabaseErrorThrownByUpdateStatementContainSQL),
        ("testDictionaryStatementArguments", testDictionaryStatementArguments),
        ("testExecuteMultipleStatement", testExecuteMultipleStatement),
        ("testExecuteMultipleStatementWithNamedArguments", testExecuteMultipleStatementWithNamedArguments),
        ("testExecuteMultipleStatementWithPlentyOfSemicolonsAndWhiteSpaceAndComments", testExecuteMultipleStatementWithPlentyOfSemicolonsAndWhiteSpaceAndComments),
        ("testExecuteMultipleStatementWithPositionalArguments", testExecuteMultipleStatementWithPositionalArguments),
        ("testExecuteMultipleStatementWithReusedNamedArguments", testExecuteMultipleStatementWithReusedNamedArguments),
        ("testExecuteMultipleStatementWithTooManyArguments", testExecuteMultipleStatementWithTooManyArguments),
        ("testExecuteMultipleStatementWithTrailingSemicolonAndWhiteSpace", testExecuteMultipleStatementWithTrailingSemicolonAndWhiteSpace),
        ("testExecuteMultipleStatementWithTrailingWhiteSpace", testExecuteMultipleStatementWithTrailingWhiteSpace),
        ("testExecuteNothing", testExecuteNothing),
        ("testExecuteSQLLiteral", testExecuteSQLLiteral),
        ("testExecuteSQLLiteralWithInterpolation", testExecuteSQLLiteralWithInterpolation),
        ("testMultipleStatementsWithSecondOneInvalidError", testMultipleStatementsWithSecondOneInvalidError),
        ("testMultipleValidStatementsError", testMultipleValidStatementsError),
        ("testStatementArgumentsSetterWithArray", testStatementArgumentsSetterWithArray),
        ("testStatementArgumentsSetterWithDictionary", testStatementArgumentsSetterWithDictionary),
        ("testStatementSQL", testStatementSQL),
        ("testTrailingSemicolonAndWhiteSpaceIsAcceptedAndOptional", testTrailingSemicolonAndWhiteSpaceIsAcceptedAndOptional),
        ("testUpdateStatementAcceptsSelectQueriesAndConsumeAllRows", testUpdateStatementAcceptsSelectQueriesAndConsumeAllRows),
        ("testUpdateStatementAcceptsSelectQueries", testUpdateStatementAcceptsSelectQueries),
    ]
}

extension UtilsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__UtilsTests = [
        ("testThrowingFirstError", testThrowingFirstError),
    ]
}

extension ValueObservationCountTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ValueObservationCountTests = [
        ("testCount", testCount),
        ("testCountWithRemoveDuplicates", testCountWithRemoveDuplicates),
    ]
}

extension ValueObservationDatabaseValueConvertibleTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ValueObservationDatabaseValueConvertibleTests = [
        ("testAll", testAll),
        ("testAllOptional", testAllOptional),
        ("testOne", testOne),
        ("testOneOptional", testOneOptional),
    ]
}

extension ValueObservationFetchTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ValueObservationFetchTests = [
        ("testFetch", testFetch),
        ("testRemoveDuplicated", testRemoveDuplicated),
    ]
}

extension ValueObservationMapTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ValueObservationMapTests = [
        ("testMap", testMap),
        ("testMapPreservesConfiguration", testMapPreservesConfiguration),
    ]
}

extension ValueObservationQueryInterfaceRequestTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ValueObservationQueryInterfaceRequestTests = [
        ("testAllRecordsWithPrefetchedRows", testAllRecordsWithPrefetchedRows),
        ("testAllRowsWithPrefetchedRows", testAllRowsWithPrefetchedRows),
        ("testOneRecordWithPrefetchedRows", testOneRecordWithPrefetchedRows),
        ("testOneRowWithPrefetchedRows", testOneRowWithPrefetchedRows),
    ]
}

extension ValueObservationReadonlyTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ValueObservationReadonlyTests = [
        ("testReadOnlyObservation", testReadOnlyObservation),
        ("testWriteObservation", testWriteObservation),
        ("testWriteObservationFailsByDefaultWithErrorHandling", testWriteObservationFailsByDefaultWithErrorHandling),
        ("testWriteObservationIsWrappedInSavepointWithErrorHandling", testWriteObservationIsWrappedInSavepointWithErrorHandling),
    ]
}

extension ValueObservationRecordTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ValueObservationRecordTests = [
        ("testAll", testAll),
        ("testOne", testOne),
    ]
}

extension ValueObservationRecorderTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ValueObservationRecorderTests = [
        ("testAssertValueObservationRecordingMatch", testAssertValueObservationRecordingMatch),
        ("testEmptyTest", testEmptyTest),
        ("testExactNumberOfRepetitionIsRequired", testExactNumberOfRepetitionIsRequired),
        ("testExpectedAnyFailure", testExpectedAnyFailure),
        ("testExpectedFailure", testExpectedFailure),
        ("testExpectedFailureCanBeRepeated", testExpectedFailureCanBeRepeated),
        ("testExpectedFailureMatchesOnPrefix", testExpectedFailureMatchesOnPrefix),
        ("testFailureNotFailed", testFailureNotFailed),
        ("testFailureSuccess", testFailureSuccess),
        ("testFailureTimeout", testFailureTimeout),
        ("testMissedFailure", testMissedFailure),
        ("testMissingAnyFailure", testMissingAnyFailure),
        ("testNextError", testNextError),
        ("testNextNotEnoughElement", testNextNotEnoughElement),
        ("testNextOneError", testNextOneError),
        ("testNextOneInvertedError", testNextOneInvertedError),
        ("testNextOneInvertedSuccess", testNextOneInvertedSuccess),
        ("testNextOneInvertedTimeout", testNextOneInvertedTimeout),
        ("testNextOneNotEnoughElement", testNextOneNotEnoughElement),
        ("testNextOneSuccess", testNextOneSuccess),
        ("testNextOneTimeout", testNextOneTimeout),
        ("testNextSuccess", testNextSuccess),
        ("testNextTimeout", testNextTimeout),
        ("testOrderOfExpectedFailureIsIgnored", testOrderOfExpectedFailureIsIgnored),
        ("testPrefixMaxLengthError", testPrefixMaxLengthError),
        ("testPrefixMaxLengthInvertedError", testPrefixMaxLengthInvertedError),
        ("testPrefixMaxLengthInvertedSuccess", testPrefixMaxLengthInvertedSuccess),
        ("testPrefixMaxLengthInvertedTimeout", testPrefixMaxLengthInvertedTimeout),
        ("testPrefixMaxLengthSuccess", testPrefixMaxLengthSuccess),
        ("testPrefixMaxLengthTimeout", testPrefixMaxLengthTimeout),
        ("testPrefixUntilError", testPrefixUntilError),
        ("testPrefixUntilSuccess", testPrefixUntilSuccess),
        ("testPrefixUntilTimeout", testPrefixUntilTimeout),
        ("testUnexpectedFailure", testUnexpectedFailure),
    ]
}

extension ValueObservationRegionRecordingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ValueObservationRegionRecordingTests = [
        ("testRecordingSelectedRegion", testRecordingSelectedRegion),
        ("testTupleObservation", testTupleObservation),
        ("testVaryingRegionTrackingAsyncScheduling", testVaryingRegionTrackingAsyncScheduling),
        ("testVaryingRegionTrackingImmediateScheduling", testVaryingRegionTrackingImmediateScheduling),
    ]
}

extension ValueObservationRowTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ValueObservationRowTests = [
        ("testAll", testAll),
        ("testFTS4Observation", testFTS4Observation),
        ("testJoinedFTS4Observation", testJoinedFTS4Observation),
        ("testOne", testOne),
        ("testSynchronizedFTS4Observation", testSynchronizedFTS4Observation),
    ]
}

extension ValueObservationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ValueObservationTests = [
        ("testCancellableExplicitCancellation", testCancellableExplicitCancellation),
        ("testCancellableInvalidation1", testCancellableInvalidation1),
        ("testCancellableLifetime", testCancellableLifetime),
        ("testErrorCompletesTheObservation", testErrorCompletesTheObservation),
        ("testImmediateError", testImmediateError),
        ("testViewOptimization", testViewOptimization),
    ]
}

extension VirtualTableModuleTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__VirtualTableModuleTests = [
        ("testCustomVirtualTableModule", testCustomVirtualTableModule),
        ("testThrowingCustomVirtualTableModule", testThrowingCustomVirtualTableModule),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(AdapterRowTests.__allTests__AdapterRowTests),
        testCase(AnyCursorTests.__allTests__AnyCursorTests),
        testCase(AssociationAggregateTests.__allTests__AssociationAggregateTests),
        testCase(AssociationBelongsToDecodableRecordTests.__allTests__AssociationBelongsToDecodableRecordTests),
        testCase(AssociationBelongsToFetchableRecordTests.__allTests__AssociationBelongsToFetchableRecordTests),
        testCase(AssociationBelongsToRowScopeTests.__allTests__AssociationBelongsToRowScopeTests),
        testCase(AssociationBelongsToSQLDerivationTests.__allTests__AssociationBelongsToSQLDerivationTests),
        testCase(AssociationBelongsToSQLTests.__allTests__AssociationBelongsToSQLTests),
        testCase(AssociationChainRowScopesTests.__allTests__AssociationChainRowScopesTests),
        testCase(AssociationChainSQLTests.__allTests__AssociationChainSQLTests),
        testCase(AssociationHasManyOrderingTests.__allTests__AssociationHasManyOrderingTests),
        testCase(AssociationHasManyRowScopeTests.__allTests__AssociationHasManyRowScopeTests),
        testCase(AssociationHasManySQLTests.__allTests__AssociationHasManySQLTests),
        testCase(AssociationHasManyThroughOrderingTests.__allTests__AssociationHasManyThroughOrderingTests),
        testCase(AssociationHasManyThroughRowScopeTests.__allTests__AssociationHasManyThroughRowScopeTests),
        testCase(AssociationHasManyThroughSQLTests.__allTests__AssociationHasManyThroughSQLTests),
        testCase(AssociationHasOneSQLDerivationTests.__allTests__AssociationHasOneSQLDerivationTests),
        testCase(AssociationHasOneSQLTests.__allTests__AssociationHasOneSQLTests),
        testCase(AssociationHasOneThroughDecodableRecordTests.__allTests__AssociationHasOneThroughDecodableRecordTests),
        testCase(AssociationHasOneThroughFetchableRecordTests.__allTests__AssociationHasOneThroughFetchableRecordTests),
        testCase(AssociationHasOneThroughRowscopeTests.__allTests__AssociationHasOneThroughRowscopeTests),
        testCase(AssociationHasOneThroughSQLDerivationTests.__allTests__AssociationHasOneThroughSQLDerivationTests),
        testCase(AssociationHasOneThroughSQLTests.__allTests__AssociationHasOneThroughSQLTests),
        testCase(AssociationParallelDecodableRecordTests.__allTests__AssociationParallelDecodableRecordTests),
        testCase(AssociationParallelRowScopesTests.__allTests__AssociationParallelRowScopesTests),
        testCase(AssociationParallelSQLTests.__allTests__AssociationParallelSQLTests),
        testCase(AssociationPrefetchingCodableRecordTests.__allTests__AssociationPrefetchingCodableRecordTests),
        testCase(AssociationPrefetchingFetchableRecordTests.__allTests__AssociationPrefetchingFetchableRecordTests),
        testCase(AssociationPrefetchingObservationTests.__allTests__AssociationPrefetchingObservationTests),
        testCase(AssociationPrefetchingRowTests.__allTests__AssociationPrefetchingRowTests),
        testCase(AssociationPrefetchingSQLTests.__allTests__AssociationPrefetchingSQLTests),
        testCase(AssociationRowScopeSearchTests.__allTests__AssociationRowScopeSearchTests),
        testCase(AssociationTableAliasTestsSQLTests.__allTests__AssociationTableAliasTestsSQLTests),
        testCase(CGFloatTests.__allTests__CGFloatTests),
        testCase(ColumnExpressionTests.__allTests__ColumnExpressionTests),
        testCase(ColumnInfoTests.__allTests__ColumnInfoTests),
        testCase(ConcurrencyTests.__allTests__ConcurrencyTests),
        testCase(CursorTests.__allTests__CursorTests),
        testCase(DataMemoryTests.__allTests__DataMemoryTests),
        // testCase(DatabaseAbortedTransactionTests.__allTests__DatabaseAbortedTransactionTests),
        testCase(DatabaseAfterNextTransactionCommitTests.__allTests__DatabaseAfterNextTransactionCommitTests),
        testCase(DatabaseAggregateTests.__allTests__DatabaseAggregateTests),
        testCase(DatabaseCollationTests.__allTests__DatabaseCollationTests),
        testCase(DatabaseConfigurationTests.__allTests__DatabaseConfigurationTests),
        testCase(DatabaseCursorTests.__allTests__DatabaseCursorTests),
        testCase(DatabaseDateDecodingStrategyTests.__allTests__DatabaseDateDecodingStrategyTests),
        testCase(DatabaseDateEncodingStrategyTests.__allTests__DatabaseDateEncodingStrategyTests),
        testCase(DatabaseErrorTests.__allTests__DatabaseErrorTests),
        testCase(DatabaseFunctionTests.__allTests__DatabaseFunctionTests),
        testCase(DatabaseLogErrorTests.__allTests__DatabaseLogErrorTests),
        testCase(DatabaseMigratorTests.__allTests__DatabaseMigratorTests),
        testCase(DatabasePoolBackupTests.__allTests__DatabasePoolBackupTests),
        testCase(DatabasePoolCollationTests.__allTests__DatabasePoolCollationTests),
        testCase(DatabasePoolConcurrencyTests.__allTests__DatabasePoolConcurrencyTests),
        testCase(DatabasePoolFunctionTests.__allTests__DatabasePoolFunctionTests),
        testCase(DatabasePoolReadOnlyTests.__allTests__DatabasePoolReadOnlyTests),
        testCase(DatabasePoolReleaseMemoryTests.__allTests__DatabasePoolReleaseMemoryTests),
        testCase(DatabasePoolSchemaCacheTests.__allTests__DatabasePoolSchemaCacheTests),
        testCase(DatabasePoolTests.__allTests__DatabasePoolTests),
        testCase(DatabaseQueueBackupTests.__allTests__DatabaseQueueBackupTests),
        testCase(DatabaseQueueInMemoryTests.__allTests__DatabaseQueueInMemoryTests),
        testCase(DatabaseQueueReadOnlyTests.__allTests__DatabaseQueueReadOnlyTests),
        testCase(DatabaseQueueReleaseMemoryTests.__allTests__DatabaseQueueReleaseMemoryTests),
        testCase(DatabaseQueueSchemaCacheTests.__allTests__DatabaseQueueSchemaCacheTests),
        testCase(DatabaseQueueTests.__allTests__DatabaseQueueTests),
        testCase(DatabaseReaderTests.__allTests__DatabaseReaderTests),
        testCase(DatabaseRegionObservationTests.__allTests__DatabaseRegionObservationTests),
        testCase(DatabaseRegionTests.__allTests__DatabaseRegionTests),
        testCase(DatabaseSavepointTests.__allTests__DatabaseSavepointTests),
        testCase(DatabaseSnapshotTests.__allTests__DatabaseSnapshotTests),
        testCase(DatabaseSuspensionTests.__allTests__DatabaseSuspensionTests),
        testCase(DatabaseTests.__allTests__DatabaseTests),
        testCase(DatabaseTimestampTests.__allTests__DatabaseTimestampTests),
        testCase(DatabaseUUIDEncodingStrategyTests.__allTests__DatabaseUUIDEncodingStrategyTests),
        testCase(DatabaseValueConversionErrorTests.__allTests__DatabaseValueConversionErrorTests),
        testCase(DatabaseValueConversionTests.__allTests__DatabaseValueConversionTests),
        testCase(DatabaseValueConvertibleDecodableTests.__allTests__DatabaseValueConvertibleDecodableTests),
        testCase(DatabaseValueConvertibleEncodableTests.__allTests__DatabaseValueConvertibleEncodableTests),
        testCase(DatabaseValueConvertibleEscapingTests.__allTests__DatabaseValueConvertibleEscapingTests),
        testCase(DatabaseValueConvertibleFetchTests.__allTests__DatabaseValueConvertibleFetchTests),
        testCase(DatabaseValueConvertibleSubclassTests.__allTests__DatabaseValueConvertibleSubclassTests),
        testCase(DatabaseValueTests.__allTests__DatabaseValueTests),
        testCase(DatabaseWriterTests.__allTests__DatabaseWriterTests),
        testCase(DerivableRequestTests.__allTests__DerivableRequestTests),
        testCase(DropFirstCursorTests.__allTests__DropFirstCursorTests),
        testCase(DropWhileCursorTests.__allTests__DropWhileCursorTests),
        testCase(EnumeratedCursorTests.__allTests__EnumeratedCursorTests),
        testCase(FTS3PatternTests.__allTests__FTS3PatternTests),
        testCase(FTS3RecordTests.__allTests__FTS3RecordTests),
        testCase(FTS3TableBuilderTests.__allTests__FTS3TableBuilderTests),
        testCase(FTS3TokenizerTests.__allTests__FTS3TokenizerTests),
        testCase(FTS4RecordTests.__allTests__FTS4RecordTests),
        testCase(FTS4TableBuilderTests.__allTests__FTS4TableBuilderTests),
        testCase(FailureTestCase.__allTests__FailureTestCase),
        testCase(FetchRequestTests.__allTests__FetchRequestTests),
        testCase(FetchableRecordDecodableTests.__allTests__FetchableRecordDecodableTests),
        testCase(FetchableRecordQueryInterfaceRequestTests.__allTests__FetchableRecordQueryInterfaceRequestTests),
        testCase(FetchableRecordTests.__allTests__FetchableRecordTests),
        testCase(FetchedRecordsControllerTests.__allTests__FetchedRecordsControllerTests),
        testCase(FilterCursorTests.__allTests__FilterCursorTests),
        testCase(FlattenCursorTests.__allTests__FlattenCursorTests),
        testCase(ForeignKeyInfoTests.__allTests__ForeignKeyInfoTests),
        testCase(FoundationDataTests.__allTests__FoundationDataTests),
        testCase(FoundationDateComponentsTests.__allTests__FoundationDateComponentsTests),
        testCase(FoundationDateTests.__allTests__FoundationDateTests),
        testCase(FoundationNSDataTests.__allTests__FoundationNSDataTests),
        // testCase(FoundationNSDateTests.__allTests__FoundationNSDateTests),
        // testCase(FoundationNSDecimalNumberTests.__allTests__FoundationNSDecimalNumberTests),
        testCase(FoundationNSNullTests.__allTests__FoundationNSNullTests),
        // testCase(FoundationNSNumberTests.__allTests__FoundationNSNumberTests),
        testCase(FoundationNSStringTests.__allTests__FoundationNSStringTests),
        // testCase(FoundationNSURLTests.__allTests__FoundationNSURLTests),
        // testCase(FoundationNSUUIDTests.__allTests__FoundationNSUUIDTests),
        testCase(FoundationURLTests.__allTests__FoundationURLTests),
        testCase(FoundationUUIDTests.__allTests__FoundationUUIDTests),
        testCase(IndexInfoTests.__allTests__IndexInfoTests),
        testCase(InflectionsTests.__allTests__InflectionsTests),
        testCase(JoinSupportTests.__allTests__JoinSupportTests),
        testCase(MapCursorTests.__allTests__MapCursorTests),
        testCase(MutablePersistableRecordChangesTests.__allTests__MutablePersistableRecordChangesTests),
        testCase(MutablePersistableRecordDeleteTests.__allTests__MutablePersistableRecordDeleteTests),
        testCase(MutablePersistableRecordEncodableTests.__allTests__MutablePersistableRecordEncodableTests),
        testCase(MutablePersistableRecordPersistenceConflictPolicyTests.__allTests__MutablePersistableRecordPersistenceConflictPolicyTests),
        testCase(MutablePersistableRecordTests.__allTests__MutablePersistableRecordTests),
        testCase(MutablePersistableRecordUpdateTests.__allTests__MutablePersistableRecordUpdateTests),
        testCase(NumericOverflowTests.__allTests__NumericOverflowTests),
        testCase(OrderedDictionaryTests.__allTests__OrderedDictionaryTests),
        testCase(PersistableRecordTests.__allTests__PersistableRecordTests),
        testCase(PoolTests.__allTests__PoolTests),
        testCase(PrefixCursorTests.__allTests__PrefixCursorTests),
        testCase(PrefixWhileCursorTests.__allTests__PrefixWhileCursorTests),
        testCase(PrimaryKeyInfoTests.__allTests__PrimaryKeyInfoTests),
        testCase(QueryInterfaceExpressionsTests.__allTests__QueryInterfaceExpressionsTests),
        testCase(QueryInterfaceExtensibilityTests.__allTests__QueryInterfaceExtensibilityTests),
        testCase(QueryInterfacePromiseTests.__allTests__QueryInterfacePromiseTests),
        testCase(QueryInterfaceRequestTests.__allTests__QueryInterfaceRequestTests),
        testCase(RawRepresentableDatabaseValueConvertibleTests.__allTests__RawRepresentableDatabaseValueConvertibleTests),
        testCase(RecordCopyTests.__allTests__RecordCopyTests),
        testCase(RecordEditedTests.__allTests__RecordEditedTests),
        testCase(RecordInitializersTests.__allTests__RecordInitializersTests),
        testCase(RecordMinimalPrimaryKeyRowIDTests.__allTests__RecordMinimalPrimaryKeyRowIDTests),
        testCase(RecordMinimalPrimaryKeySingleTests.__allTests__RecordMinimalPrimaryKeySingleTests),
        testCase(RecordPersistenceConflictPolicyTests.__allTests__RecordPersistenceConflictPolicyTests),
        testCase(RecordPrimaryKeyHiddenRowIDTests.__allTests__RecordPrimaryKeyHiddenRowIDTests),
        testCase(RecordPrimaryKeyMultipleTests.__allTests__RecordPrimaryKeyMultipleTests),
        testCase(RecordPrimaryKeyNoneTests.__allTests__RecordPrimaryKeyNoneTests),
        testCase(RecordPrimaryKeyRowIDTests.__allTests__RecordPrimaryKeyRowIDTests),
        testCase(RecordPrimaryKeySingleTests.__allTests__RecordPrimaryKeySingleTests),
        testCase(RecordPrimaryKeySingleWithReplaceConflictResolutionTests.__allTests__RecordPrimaryKeySingleWithReplaceConflictResolutionTests),
        testCase(RecordQueryInterfaceRequestTests.__allTests__RecordQueryInterfaceRequestTests),
        testCase(RecordSubClassTests.__allTests__RecordSubClassTests),
        testCase(RecordUniqueIndexTests.__allTests__RecordUniqueIndexTests),
        testCase(RecordWithColumnNameManglingTests.__allTests__RecordWithColumnNameManglingTests),
        testCase(ResultCodeTests.__allTests__ResultCodeTests),
        testCase(RowCopiedFromStatementTests.__allTests__RowCopiedFromStatementTests),
        testCase(RowFetchTests.__allTests__RowFetchTests),
        testCase(RowFoundationTests.__allTests__RowFoundationTests),
        testCase(RowFromDictionaryLiteralTests.__allTests__RowFromDictionaryLiteralTests),
        testCase(RowFromDictionaryTests.__allTests__RowFromDictionaryTests),
        testCase(RowFromStatementTests.__allTests__RowFromStatementTests),
        testCase(SQLExpressionLiteralTests.__allTests__SQLExpressionLiteralTests),
        testCase(SQLLiteralTests.__allTests__SQLLiteralTests),
        testCase(SQLRequestTests.__allTests__SQLRequestTests),
        testCase(SchedulingWatchdogTests.__allTests__SchedulingWatchdogTests),
        testCase(SelectStatementTests.__allTests__SelectStatementTests),
        testCase(StatementArgumentsFoundationTests.__allTests__StatementArgumentsFoundationTests),
        testCase(StatementArgumentsTests.__allTests__StatementArgumentsTests),
        testCase(StatementColumnConvertibleFetchTests.__allTests__StatementColumnConvertibleFetchTests),
        testCase(TableDefinitionTests.__allTests__TableDefinitionTests),
        testCase(TableRecordQueryInterfaceRequestTests.__allTests__TableRecordQueryInterfaceRequestTests),
        testCase(TableRecordTests.__allTests__TableRecordTests),
        testCase(TransactionObserverSavepointsTests.__allTests__TransactionObserverSavepointsTests),
        testCase(TransactionObserverTests.__allTests__TransactionObserverTests),
        testCase(TruncateOptimizationTests.__allTests__TruncateOptimizationTests),
        testCase(UpdateStatementTests.__allTests__UpdateStatementTests),
        testCase(UtilsTests.__allTests__UtilsTests),
        testCase(ValueObservationCountTests.__allTests__ValueObservationCountTests),
        testCase(ValueObservationDatabaseValueConvertibleTests.__allTests__ValueObservationDatabaseValueConvertibleTests),
        testCase(ValueObservationFetchTests.__allTests__ValueObservationFetchTests),
        testCase(ValueObservationMapTests.__allTests__ValueObservationMapTests),
        testCase(ValueObservationQueryInterfaceRequestTests.__allTests__ValueObservationQueryInterfaceRequestTests),
        testCase(ValueObservationReadonlyTests.__allTests__ValueObservationReadonlyTests),
        testCase(ValueObservationRecordTests.__allTests__ValueObservationRecordTests),
        testCase(ValueObservationRecorderTests.__allTests__ValueObservationRecorderTests),
        testCase(ValueObservationRegionRecordingTests.__allTests__ValueObservationRegionRecordingTests),
        testCase(ValueObservationRowTests.__allTests__ValueObservationRowTests),
        testCase(ValueObservationTests.__allTests__ValueObservationTests),
        testCase(VirtualTableModuleTests.__allTests__VirtualTableModuleTests),
    ]
}
#endif
